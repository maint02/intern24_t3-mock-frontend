/**-----------------------------------------------------------------------------------------
* Copyright © 2019 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, EventEmitter, Host, HostBinding, Inject, Input, NgModule, NgZone, Optional, Output, ViewChild, ViewContainerRef, forwardRef, isDevMode } from '@angular/core';
import { FormControl, FormGroup, FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validators } from '@angular/forms';
import { BehaviorSubject, Subject, fromEvent, interval, merge } from 'rxjs';
import { auditTime, concatMap, filter, map, take, takeUntil } from 'rxjs/operators';
import { ToolBarButtonComponent, ToolBarComponent, ToolBarModule, ToolBarToolComponent } from '@progress/kendo-angular-toolbar';
import { DialogContentBase, DialogModule, DialogRef, DialogService } from '@progress/kendo-angular-dialog';
import { KendoInput, isDocumentAvailable } from '@progress/kendo-angular-common';
import { EditorView } from 'prosemirror-view';
import { AllSelection, EditorState, NodeSelection, TextSelection } from 'prosemirror-state';
import { autoJoin, baseKeymap, chainCommands, createParagraphNear, deleteSelection, exitCode, joinBackward, liftEmptyBlock, newlineInCode, selectNodeBackward, setBlockType, splitBlockKeepMarks, toggleMark } from 'prosemirror-commands';
import { keymap } from 'prosemirror-keymap';
import { history, redo, undo } from 'prosemirror-history';
import { DOMParser, DOMSerializer, Fragment, Node, NodeRange, Schema, Slice } from 'prosemirror-model';
import { CellSelection, addColumnAfter, addColumnBefore, addRowAfter, addRowBefore, deleteColumn, deleteRow, deleteTable, mergeCells, splitCell, tableNodes } from 'prosemirror-tables';
import { undoInputRule } from 'prosemirror-inputrules';
import { AddMarkStep, RemoveMarkStep, ReplaceAroundStep, liftTarget } from 'prosemirror-transform';
import { liftListItem, sinkListItem, splitListItem, wrapInList } from 'prosemirror-schema-list';
import { ComponentMessages, L10N_PREFIX, LocalizationService, MessageService, RTL } from '@progress/kendo-angular-l10n';
import { CommonModule } from '@angular/common';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { ButtonModule } from '@progress/kendo-angular-buttons';
import { ColorPickerModule, NumericTextBoxModule, TextBoxModule } from '@progress/kendo-angular-inputs';
import { PopupService } from '@progress/kendo-angular-popup';

/**
 * @hidden
 */
function outerWidth(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += (parseFloat(style.marginLeft) || 0 + parseFloat(style.marginRight) || 0);
    return width;
}
/**
 * @hidden
 */
const serializeDOMAttrs = (el) => Array.from(el.attributes)
    .reduce((acc, curr) => Object.assign({}, acc, { [curr.name]: curr.value }), {});
/**
 * @hidden
 */
const removeEntries = (obj, predicate) => Object.keys(obj)
    .filter(key => predicate(key))
    .reduce((acc, curr) => Object.assign(acc, { [curr]: obj[curr] }), {});
/**
 * @hidden
 */
const removeEmptyEntries = (obj) => {
    const predicate = (key) => obj[key] !== null && obj[key] !== undefined && obj[key] !== '';
    return removeEntries(obj, predicate);
};
/**
 * @hidden
 */
const isEmpty = (obj) => Object.keys(obj).length === 0;
/**
 * @hidden
 */
const isNullOrUndefined = (value) => value === undefined || value === null;
/**
 * @hidden
 */
const isPresent = (value) => !isNullOrUndefined(value);
/**
 * @hidden
 */
const detectIE = () => {
    if (!isDocumentAvailable()) {
        return false;
    }
    const ua = window.navigator.userAgent;
    const msie = ua.indexOf('MSIE ');
    const trident = ua.indexOf('Trident/');
    return msie > 0 || trident > 0;
};
/**
 * @hidden
 */
const safeString = (value) => isNullOrUndefined(value) ? '' : value.toString();
/**
 * @hidden
 */
const first = (arr) => arr[0];
/**
 * @hidden
 */
const last = (arr) => arr[arr.length - 1];
/**
 * @hidden
 */
const unique = (arr) => Array.from(new Set(arr));
/**
 * @hidden
 */
const split = (splitter) => (value) => value.split(splitter);
/**
 * @hidden
 */
const trim = (value) => value.trim();
/**
 * @hidden
 */
const filter$1 = (predicate) => (arr) => arr.filter(predicate);
/**
 * @hidden
 */
const toArray = (x) => x instanceof Array ? x : [x];

const SLOT = 0; //https://prosemirror.net/docs/guide/#schema.serialization_and_parsing
const commonAttributes = () => {
    return {
        class: { default: null },
        id: { default: null },
        style: { default: null }
    };
};
const ɵ1 = (dom) => ({
    href: dom.getAttribute('href'),
    target: dom.getAttribute('target'),
    title: dom.getAttribute('title')
});
const ɵ2 = (mark) => [
    'a',
    // Add default value for href. Otherwise the link is not rendered properly(blue with underline)
    Object.assign({}, { href: '' }, removeEmptyEntries(mark.attrs)),
    SLOT
];
const ɵ3 = () => ['em', SLOT];
const ɵ4 = (value) => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null;
const ɵ5 = () => ['strong', SLOT];
const ɵ6 = () => ['code', SLOT];
const ɵ7 = () => ['u', SLOT];
const ɵ8 = () => ['del', SLOT];
const ɵ9 = () => ['sub', SLOT];
const ɵ10 = () => ['sup', SLOT];
const ɵ11 = (dom) => ({
    style: dom.getAttribute('style')
});
const ɵ12 = (mark) => ['span', Object.assign({}, removeEmptyEntries(mark.attrs)), SLOT];
/**
 * @hidden
 */
const marks = {
    // :: MarkSpec A link. Has `href` and `title` attributes. `title`
    // defaults to an empty string. Rendered and parsed as an `<a>`
    // element.
    link: {
        attrs: {
            href: { default: '' },
            target: { default: null },
            title: { default: null }
        },
        inclusive: false,
        parseDOM: [
            {
                getAttrs: ɵ1,
                tag: 'a[href]'
            }
        ],
        toDOM: ɵ2
    },
    // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.
    // Has parse rules that also match `<i>` and `font-style: italic`.
    em: {
        parseDOM: [{ tag: 'i' }, { tag: 'em' }, { style: 'font-style=italic' }],
        toDOM: ɵ3
    },
    // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules
    // also match `<b>` and `font-weight: bold`.
    strong: {
        parseDOM: [
            { tag: 'strong' },
            // This works around a Google Docs misbehavior where
            // pasted content will be inexplicably wrapped in `<b>`
            // tags with a font-weight normal `{tag: 'b', getAttrs: node => node.style.fontWeight != 'normal' && null}`,
            {
                // According to the docs, the value can be a DOM element (for tag rules) or a string (for style rules).
                getAttrs: ɵ4,
                style: 'font-weight'
            }
        ],
        toDOM: ɵ5
    },
    // :: MarkSpec Code font mark. Represented as a `<code>` element.
    code: {
        parseDOM: [{ tag: 'code' }],
        toDOM: ɵ6
    },
    // :: MarkSpec An underline mark. Rendered as a `<u>` element.
    // Parse rules also match `text-decoration: underline`.
    underline: {
        parseDOM: [{ tag: 'u' }, { style: 'text-decoration=underline' }],
        toDOM: ɵ7
    },
    // :: MarkSpec A strikethrough mark. Rendered as a `<del>` element.
    // Parse rules also match `<s>`, `<strike>`, `text-decoration: line-through`.
    strikethrough: {
        parseDOM: [{ tag: 'del' }, { tag: 's' }, { tag: 'strike' }, { style: 'text-decoration=line-through' }],
        toDOM: ɵ8
    },
    // :: MarkSpec A subscript mark. Rendered as a `<sub>` element.
    // Parse rules also match `vertical-align: sub`.
    subscript: {
        parseDOM: [{ tag: 'sub' }, { style: 'vertical-align=sub' }],
        toDOM: ɵ9
    },
    // :: MarkSpec A superscript mark. Rendered as a `<sup>` element.
    // Parse rules also match `vertical-align: super`.
    superscript: {
        parseDOM: [{ tag: 'sup' }, { style: 'vertical-align=super' }],
        toDOM: ɵ10
    },
    style: {
        attrs: Object.assign({}, commonAttributes(), { style: {} }),
        parseDOM: [
            {
                // think about a way to remove span tags with empty style attributes or no style attributes at all
                getAttrs: ɵ11,
                tag: 'span[style]'
            }
        ],
        toDOM: ɵ12
    }
};
const kendoTableNodes = () => {
    const tableGroup = 'block';
    const nodes = tableNodes({ tableGroup: tableGroup, cellContent: 'block+', cellAttributes: commonAttributes });
    return Object.assign(nodes, {
        table: {
            attrs: Object.assign({}, commonAttributes(), { class: { default: 'k-table' }, cellspacing: { default: null }, cellpadding: { default: null } }),
            content: "table_row+",
            tableRole: "table",
            isolating: true,
            group: tableGroup,
            parseDOM: [
                {
                    getAttrs: serializeDOMAttrs,
                    tag: "table"
                }
            ],
            toDOM: (node) => ["table", removeEmptyEntries(node.attrs), ["tbody", 0]]
        }
    });
};
const ɵ14 = (node) => (isEmpty(node.attrs) ? ['p', SLOT] : ['p', removeEmptyEntries(node.attrs), SLOT]);
const ɵ15 = (node) => ['blockquote', removeEmptyEntries(node.attrs), SLOT];
const ɵ16 = () => ['hr'];
const ɵ17 = (dom) => Object.assign({}, serializeDOMAttrs(dom), { level: 1 });
const ɵ18 = (dom) => Object.assign({}, serializeDOMAttrs(dom), { level: 2 });
const ɵ19 = (dom) => Object.assign({}, serializeDOMAttrs(dom), { level: 3 });
const ɵ20 = (dom) => Object.assign({}, serializeDOMAttrs(dom), { level: 4 });
const ɵ21 = (dom) => Object.assign({}, serializeDOMAttrs(dom), { level: 5 });
const ɵ22 = (dom) => Object.assign({}, serializeDOMAttrs(dom), { level: 6 });
const ɵ23 = (node) => {
    const attrs = removeEntries(node.attrs, key => key !== 'level');
    return ['h' + node.attrs.level, removeEmptyEntries(attrs), SLOT];
};
const ɵ24 = () => ['pre', ['code', SLOT]];
const ɵ25 = (dom) => ({
    alt: dom.getAttribute('alt'),
    height: dom.getAttribute('height'),
    src: dom.getAttribute('src'),
    width: dom.getAttribute('width')
});
const ɵ26 = (node) => ['img', removeEmptyEntries(node.attrs)];
const ɵ27 = () => ['br'];
const ɵ28 = (node) => ['li', removeEmptyEntries(node.attrs), SLOT];
const ɵ29 = (dom) => ({
    order: dom.hasAttribute('start') ? parseInt(dom.getAttribute('start'), 10) : 1
});
const ɵ30 = node => (node.attrs.order === 1 ? ['ol', SLOT] : ['ol', { start: node.attrs.order }, SLOT]);
const ɵ31 = () => ['ul', SLOT];
/**
 * @hidden
 */
const nodes = Object.assign({ 
    // :: NodeSpec The top level document node.
    doc: {
        content: 'block+'
    }, 
    // :: NodeSpec A plain textblock paragraph. Represented
    // as a `<p>` element in the DOM.
    paragraph: {
        attrs: Object.assign({}, commonAttributes()),
        content: 'inline*',
        group: 'block',
        parseDOM: [
            {
                getAttrs: serializeDOMAttrs,
                tag: 'p'
            }
        ],
        toDOM: ɵ14
    }, 
    // :: NodeSpec A blockquote (`<blockquote>`) which wraps one or more blocks.
    blockquote: {
        attrs: Object.assign({}, commonAttributes()),
        content: 'inline*',
        defining: true,
        group: 'block',
        parseDOM: [{ tag: 'blockquote' }],
        toDOM: ɵ15
    }, 
    // :: NodeSpec A horizontal (`<hr>`) rule.
    horizontalRule: {
        group: 'block',
        parseDOM: [{ tag: 'hr' }],
        toDOM: ɵ16
    }, 
    // :: NodeSpec A heading textblock with a `level` attribute that
    // has to hold a number from 1 to 6. Parsed and serialized as an `<h1>` to
    // an `<h6>` element.
    heading: {
        attrs: Object.assign({ level: { default: 1 } }, commonAttributes()),
        content: 'inline*',
        defining: true,
        group: 'block',
        parseDOM: [
            { tag: 'h1', getAttrs: ɵ17 },
            { tag: 'h2', getAttrs: ɵ18 },
            { tag: 'h3', getAttrs: ɵ19 },
            { tag: 'h4', getAttrs: ɵ20 },
            { tag: 'h5', getAttrs: ɵ21 },
            { tag: 'h6', getAttrs: ɵ22 }
        ],
        toDOM: ɵ23
    }, 
    // :: NodeSpec A code listing. Prevents marks or non-text inline
    // nodes by default. Represented as a `<pre>` element with a
    // `<code>` element inside.
    codeBlock: {
        code: true,
        content: 'text*',
        defining: true,
        group: 'block',
        marks: '',
        parseDOM: [
            {
                preserveWhitespace: 'full',
                tag: 'pre'
            }
        ],
        toDOM: ɵ24
    }, 
    // :: NodeSpec The text node.
    text: {
        group: 'inline'
    }, 
    // :: NodeSpec An inline image (`<img>`) node. Supports `src`,
    // `alt`, and `href` attributes. The last two default to an empty
    // string.
    image: {
        attrs: Object.assign({}, commonAttributes(), { alt: { default: null }, height: { default: null }, src: {}, width: { default: null } }),
        draggable: true,
        group: 'inline',
        inline: true,
        parseDOM: [
            {
                getAttrs: ɵ25,
                tag: 'img[src]'
            }
        ],
        toDOM: ɵ26
    }, 
    // :: NodeSpec A hard line break. Represented as a `<br>` element in the DOM.
    hardBreak: {
        group: 'inline',
        inline: true,
        parseDOM: [{ tag: 'br' }],
        selectable: false,
        toDOM: ɵ27
    }, 
    // :: NodeSpec A list item. Represented as a `<li>` element.
    listItem: {
        attrs: Object.assign({}, commonAttributes()),
        content: 'paragraph block*',
        marks: '_',
        parseDOM: [{ tag: 'li' }],
        toDOM: ɵ28
    }, 
    // :: NodeSpec An ordered list. Represented as an `<ol>` element.
    // Has a single `order` attribute which determines the number at which
    // the list starts counting. Defaults to 1.
    orderedList: {
        attrs: {
            order: {
                default: 1
            }
        },
        content: 'listItem+',
        group: 'block',
        parseDOM: [
            {
                getAttrs: ɵ29,
                tag: 'ol'
            }
        ],
        toDOM: ɵ30
    }, 
    // :: NodeSec An unordered list. Represented as a `<ul>` element.
    bulletList: {
        content: 'listItem+',
        group: 'block',
        parseDOM: [{ tag: 'ul' }],
        toDOM: ɵ31
    } }, kendoTableNodes());
/**
 * @hidden
 */
const schema = new Schema({
    marks,
    nodes
});

/**
 * @hidden
 */
const rootListDepth = (pos, nodes) => {
    // Get the depth of the nearest ancestor list
    const { bulletList, orderedList, listItem } = nodes;
    let depth;
    for (let i = pos.depth - 1; i > 0; i--) {
        const node = pos.node(i);
        if (node.type === bulletList || node.type === orderedList) {
            depth = i;
        }
        if (node.type !== bulletList && node.type !== orderedList && node.type !== listItem) {
            break;
        }
    }
    return depth;
};
/**
 * @hidden
 */
const getListLiftTarget = (schema, resPos) => {
    // This will return (depth - 1) for root list parent of a list.
    let target = resPos.depth;
    const { bulletList, orderedList, listItem } = schema.nodes;
    for (let i = resPos.depth; i > 0; i--) {
        const node = resPos.node(i);
        if (node.type === bulletList || node.type === orderedList) {
            target = i;
        }
        if (node.type !== bulletList && node.type !== orderedList && node.type !== listItem) {
            break;
        }
    }
    return target - 1;
};
/**
 * @hidden
 */
function liftSelectionList(state, tr) {
    // The function will list paragraphs in selection out to level 1 below root list.
    const { from, to } = state.selection;
    const { paragraph } = state.schema.nodes;
    const listCol = [];
    tr.doc.nodesBetween(from, to, (node, pos) => {
        if (node.type === paragraph) {
            listCol.push({ node, pos });
        }
    });
    for (let i = listCol.length - 1; i >= 0; i--) {
        const paragr = listCol[i];
        const start = tr.doc.resolve(tr.mapping.map(paragr.pos));
        if (start.depth > 0) {
            let end;
            if (paragr.node.textContent && paragr.node.textContent.length > 0) {
                end = tr.doc.resolve(tr.mapping.map(paragr.pos + paragr.node.textContent.length));
            }
            else {
                end = tr.doc.resolve(tr.mapping.map(paragr.pos + 1));
            }
            const range = start.blockRange(end);
            if (range) {
                tr.lift(range, getListLiftTarget(state.schema, start));
            }
        }
    }
    return tr;
}
/**
 * @hidden
 */
const toggleList = (state, dispatch, view, listType) => {
    const { selection } = state;
    const fromNode = selection.$from.node(selection.$from.depth - 2);
    const endNode = selection.$to.node(selection.$to.depth - 2);
    if (!fromNode || fromNode.type.name !== listType || (!endNode || endNode.type.name !== listType)) {
        return toggleListCommand(listType)(state, dispatch, view);
    }
    else {
        const depth = rootListDepth(selection.$to, state.schema.nodes);
        let tr = liftFollowingList(state, selection.$to.pos, selection.$to.end(depth), depth, state.tr);
        tr = liftSelectionList(state, tr);
        dispatch(tr);
        return true;
    }
};
/**
 * @hidden
 */
function toggleListCommand(listType) {
    return function (state, dispatch, view) {
        if (!view) {
            return false;
        }
        state = view.state;
        const { $from, $to } = state.selection;
        const parent = $from.node(-2);
        const grandgrandParent = $from.node(-3);
        const isRangeOfSingleType = isRangeOfType(state.doc, $from, $to, state.schema.nodes[listType]);
        if (((parent && parent.type === state.schema.nodes[listType]) ||
            (grandgrandParent && grandgrandParent.type === state.schema.nodes[listType])) &&
            isRangeOfSingleType) {
            // Untoggles list
            return liftListItems()(state, dispatch);
        }
        else {
            // Wraps selection in list and converts list type e.g. bullet_list -> ordered_list if needed
            if (!isRangeOfSingleType) {
                liftListItems()(state, dispatch);
                state = view.state;
            }
            return wrapInList$1(state.schema.nodes[listType])(state, dispatch);
        }
    };
}
/**
 * @hidden
 */
function liftListItem$1(state, selection, tr) {
    let { $from, $to } = selection;
    const nodeType = state.schema.nodes.listItem;
    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type === nodeType);
    if (!range || range.depth < 2 || $from.node(range.depth - 1).type !== nodeType) {
        return tr;
    }
    let end = range.end;
    let endOfList = $to.end(range.depth);
    if (end < endOfList) {
        tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(nodeType.create(undefined, range.parent.copy())), 1, 0), 1, true));
        range = new NodeRange(tr.doc.resolve($from.pos), tr.doc.resolve(endOfList), range.depth);
    }
    return tr.lift(range, liftTarget(range)).scrollIntoView();
}
/**
 * @hidden
 */
function liftFollowingList(state, from, to, rootListDepthNum, tr) {
    // Function will lift list item following selection to level-1.
    const { listItem } = state.schema.nodes;
    let lifted = false;
    tr.doc.nodesBetween(from, to, (node, pos) => {
        if (!lifted && node.type === listItem && pos > from) {
            lifted = true;
            let listDepth = rootListDepthNum + 3;
            while (listDepth > rootListDepthNum + 2) {
                const start = tr.doc.resolve(tr.mapping.map(pos));
                listDepth = start.depth;
                const end = tr.doc.resolve(tr.mapping.map(pos + node.textContent.length));
                const sel = new TextSelection(start, end);
                tr = liftListItem$1(state, sel, tr);
            }
        }
    });
    return tr;
}
/**
 * @hidden
 */
function isRangeOfType(doc, $from, $to, nodeType) {
    // Step through block-nodes between $from and $to and returns false if a node is
    // found that isn't of the specified type
    return getAncestorNodesBetween(doc, $from, $to).filter((node) => node.type !== nodeType).length === 0;
}
/**
 * @hidden
 */
function getAncestorNodesBetween(doc, $from, $to) {
    // Returns all top-level ancestor-nodes between $from and $to
    const nodes = Array();
    const maxDepth = findAncestorPosition(doc, $from).depth;
    let current = doc.resolve($from.start(maxDepth));
    while (current.pos <= $to.start($to.depth)) {
        const depth = Math.min(current.depth, maxDepth);
        const node = current.node(depth);
        if (node) {
            nodes.push(node);
        }
        if (depth === 0) {
            break;
        }
        let next = doc.resolve(current.after(depth));
        if (next.start(depth) >= doc.nodeSize - 2) {
            break;
        }
        if (next.depth !== current.depth) {
            next = doc.resolve(next.pos + 2);
        }
        if (next.depth) {
            current = doc.resolve(next.start(next.depth));
        }
        else {
            current = doc.resolve(next.end(next.depth));
        }
    }
    return nodes;
}
/**
 * @hidden
 */
function findAncestorPosition(doc, pos) {
    // Traverse the document until an "ancestor" is found. Any nestable block can be an ancestor.
    const nestableBlocks = ['blockquote', 'bulletList', 'orderedList'];
    if (pos.depth === 1) {
        return pos;
    }
    let node = pos.node(pos.depth);
    let newPos = pos;
    while (pos.depth >= 1) {
        pos = doc.resolve(pos.before(pos.depth));
        node = pos.node(pos.depth);
        if (node && nestableBlocks.indexOf(node.type.name) !== -1) {
            newPos = pos;
        }
    }
    return newPos;
}
/**
 * @hidden
 */
function liftListItems() {
    return function (state, dispatch) {
        const { tr } = state;
        const { $from, $to } = state.selection;
        tr.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {
            // Following condition will ensure that block types paragraph, heading, codeBlock, blockquote, panel are lifted.
            // isTextblock is true for paragraph, heading, codeBlock.
            if (node.isTextblock || node.type.name === 'blockquote' || node.type.name === 'panel') {
                const sel = new NodeSelection(tr.doc.resolve(tr.mapping.map(pos)));
                const range = sel.$from.blockRange(sel.$to);
                if (!range || sel.$from.parent.type !== state.schema.nodes.listItem) {
                    return false;
                }
                const target = range && liftTarget(range);
                if (target === undefined || target === null) {
                    return false;
                }
                tr.lift(range, target);
            }
        });
        if (dispatch) {
            dispatch(tr);
        }
        return true;
    };
}
/**
 * @hidden
 */
function wrapInList$1(nodeType) {
    return autoJoin(wrapInList(nodeType), (before, after) => before.type === after.type && before.type === nodeType);
}
/**
 * @hidden
 */
function toggleUnorderedList(state, dispatch, view) {
    return toggleList(state, dispatch, view, 'bulletList');
}
/**
 * @hidden
 */
function toggleOrderedList(state, dispatch, view) {
    return toggleList(state, dispatch, view, 'orderedList');
}
/**
 * @hidden
 */
const splitListItemKeepMarks = (itemType) => (state, dispatch) => {
    // see https://github.com/ProseMirror/prosemirror-commands/blob/master/src/commands.js#L321-L327
    return splitListItem(itemType)(state, tr => {
        let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());
        if (marks) {
            tr.ensureMarks(marks);
        }
        dispatch(tr);
    });
};

const mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;
// https://github.com/ProseMirror/prosemirror-example-setup/blob/master/src/keymap.js
/**
 * @hidden
 */
const buildKeymap = (schema) => {
    const keys = {};
    keys['Mod-z'] = undo;
    keys['Shift-Mod-z'] = redo;
    // tslint:disable-next-line:no-string-literal
    keys['Backspace'] = chainCommands(undoInputRule, deleteSelection, joinBackward, selectNodeBackward);
    // tslint:disable-next-line:no-string-literal
    keys['Enter'] = chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlockKeepMarks);
    if (!mac) {
        keys['Mod-y'] = redo;
    }
    if (schema.marks.strong) {
        keys['Mod-b'] = toggleMark(schema.marks.strong);
    }
    if (schema.marks.em) {
        keys['Mod-i'] = toggleMark(schema.marks.em);
    }
    if (schema.marks.underline) {
        keys['Mod-u'] = toggleMark(schema.marks.underline);
    }
    if (schema.nodes.hardBreak) {
        const br = schema.nodes.hardBreak;
        const cmd = chainCommands(exitCode, (state, dispatch) => {
            dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
            return true;
        });
        keys['Mod-Enter'] = cmd;
        keys['Shift-Enter'] = cmd;
        if (mac) {
            keys['Ctrl-Enter'] = cmd;
        }
    }
    return keys;
};
/**
 * @hidden
 */
const buildListKeymap = (schema) => {
    const keys = {};
    if (schema.nodes.listItem) {
        // tslint:disable-next-line:no-string-literal
        keys['Enter'] = splitListItemKeepMarks(schema.nodes.listItem);
    }
    return keys;
};

const style = (name, value) => {
    return { name: name, value: value };
};
/**
 * @hidden
 */
const alignLeftRules = [
    { node: 'paragraph', style: [style('text-align', 'left')] },
    { node: 'heading', style: [style('text-align', 'left')] },
    { node: 'listItem', style: [style('text-align', 'left'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
const alignRightRules = [
    { node: 'paragraph', style: [style('text-align', 'right')] },
    { node: 'heading', style: [style('text-align', 'right')] },
    { node: 'listItem', style: [style('text-align', 'right'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
const alignCenterRules = [
    { node: 'paragraph', style: [style('text-align', 'center')] },
    { node: 'heading', style: [style('text-align', 'center')] },
    { node: 'listItem', style: [style('text-align', 'center'), style('list-style-position', 'inside')] }
];
/**
 * @hidden
 */
const alignRemoveRules = [
    { node: 'paragraph', style: [style('text-align', '')] },
    { node: 'heading', style: [style('text-align', '')] },
    { node: 'listItem', style: [style('text-align', ''), style('list-style-position', '')] }
];

const changeStyles = (elementStyle, newStyle) => {
    const styleToChange = newStyle.style;
    const regExp = newStyle.value;
    const newValue = newStyle.newValue;
    const styleMatches = [];
    if (elementStyle) {
        const splits = elementStyle.split(/\s*;\s*/).filter(s => s);
        const filtered = splits.filter(s => {
            if (!s
                .toLowerCase()
                .trim()
                .startsWith(styleToChange)) {
                return true;
            }
            const value = s.split(':')[1].trim();
            if (regExp.test(value)) {
                styleMatches.push(value);
                return false;
            }
            return true;
        });
        if (newValue) {
            filtered.push(`${styleToChange}: ${newValue}`);
        }
        return {
            changed: !!newValue || filtered.length !== splits.length,
            style: filtered.join('; ') + (filtered.length ? ';' : ''),
            styleMatches
        };
    }
    return { changed: false, styleMatches, style: null };
};
const changeStyleFromMark = (marks, toChange) => {
    const styleMark = marks.find(m => m.type.name === 'style');
    const elementStyle = styleMark && styleMark.attrs.style;
    return changeStyles(elementStyle, toChange);
};
const changeStyleMark = (tr, from, to, attrs, markType) => {
    const mark = markType.create({ style: attrs.style });
    let removed = [], added = [], removing = null, adding = null;
    tr.doc.nodesBetween(from, to, (node, pos, parent) => {
        if (!node.isInline) {
            return;
        }
        let marks = node.marks;
        if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
            let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
            const newStyle = changeStyleFromMark(marks, attrs);
            if (newStyle.changed || attrs.newValue) {
                const style = newStyle.changed ? { style: newStyle.style } : { style: `${[attrs.style]}: ${attrs.newValue};` };
                const newStyleMark = markType.create(style);
                let newSet = newStyleMark.addToSet(marks);
                for (let i = 0; i < marks.length; i++) {
                    if (!marks[i].isInSet(newSet)) {
                        if (removing && removing.to === start && removing.mark.eq(marks[i])) {
                            removing.to = end;
                        }
                        else {
                            removing = new RemoveMarkStep(start, end, marks[i]);
                            removed.push(removing);
                        }
                    }
                }
                const previousAdded = adding && adding.to === start;
                const sameAdding = previousAdded && newStyleMark.attrs.style === adding.mark.attrs.style;
                if (previousAdded && sameAdding) {
                    adding.to = end;
                }
                else if (newStyleMark.attrs.style) {
                    adding = new AddMarkStep(start, end, newStyleMark);
                    added.push(adding);
                }
            }
        }
    });
    removed.forEach(s => tr.step(s));
    added.forEach(s => tr.step(s));
    return removed.length + added.length > 0;
};
const markApplies = (doc, ranges, type) => {
    let loop = i => {
        let ref = ranges[i];
        let $from = ref.$from;
        let $to = ref.$to;
        let can = $from.depth === 0 ? doc.type.allowsMarkType(type) : false;
        doc.nodesBetween($from.pos, $to.pos, node => {
            if (can) {
                return false;
            }
            can = node.inlineContent && node.type.allowsMarkType(type);
        });
        if (can) {
            return { v: true };
        }
    };
    for (let i = 0; i < ranges.length; i++) {
        let returned = loop(i);
        if (returned) {
            return returned.v;
        }
    }
    return false;
};
/**
 * @hidden
 */
const changeStyle = (markType, attrs) => {
    return function (state, dispatch, tr) {
        let { empty, $cursor, ranges } = state.selection;
        if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) {
            return false;
        }
        let result = false;
        if (dispatch) {
            tr = tr || state.tr;
            if ($cursor) {
                const currentMarks = state.storedMarks || $cursor.marks();
                if (markType.isInSet(currentMarks)) {
                    let newStyle = changeStyleFromMark(currentMarks, attrs);
                    dispatch(tr.removeStoredMark(markType));
                    dispatch(tr.addStoredMark(markType.create({ style: newStyle.style })));
                    result = true;
                }
            }
            else {
                for (let i = 0; i < ranges.length; i++) {
                    let { $from, $to } = ranges[i];
                    result = changeStyleMark(tr, $from.pos, $to.pos, attrs, markType);
                }
                if (result) {
                    tr.scrollIntoView();
                    dispatch(tr);
                }
            }
        }
        return result;
    };
};
const canChangeType = (stateDoc, pos, type) => {
    let $pos = stateDoc.resolve(pos), index = $pos.index();
    return $pos.parent.canReplaceWith(index, index + 1, type);
};
/**
 * @hidden
 */
const changeBlockNode = (state, dispatch, tr, node, nodeType, attrs) => {
    let { from, to } = state.selection;
    let applicable = false;
    state.doc.nodesBetween(from, to, (currNode, pos) => {
        if (applicable) {
            return false;
        }
        if (!currNode.isTextblock || currNode.hasMarkup(nodeType, attrs)) {
            return;
        }
        if (currNode.type === nodeType) {
            applicable = true;
        }
        else {
            let $pos = state.doc.resolve(pos), index = $pos.index();
            applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
        }
    });
    if (!applicable) {
        return false;
    }
    if (dispatch) {
        if (!nodeType.isTextblock) {
            throw new RangeError('Type given to setBlockType should be a textblock');
        }
        let mapFrom = tr.steps.length;
        tr.doc.nodesBetween(from, to, (currNode, pos) => {
            if (currNode.eq(node) &&
                currNode.isTextblock &&
                !currNode.hasMarkup(nodeType, attrs) &&
                canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), nodeType)) {
                // Ensure all markup that isn't allowed in the new node type is cleared
                tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), nodeType);
                let mapping = tr.mapping.slice(mapFrom);
                let startM = mapping.map(pos, 1), endM = mapping.map(pos + currNode.nodeSize, 1);
                let slice = new Slice(Fragment.from(nodeType.create(attrs, null, currNode.marks)), 0, 0);
                tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, slice, 1, true));
                return false; // this will skip the node children
            }
        });
    }
    return true;
};
/**
 * @hidden
 */
function getMarkRange($cursor, markType) {
    const parentNode = $cursor.parent;
    const cursorNodeIndex = $cursor.index();
    const mark = parentNode.child(cursorNodeIndex).marks.find(m => m.type === markType);
    const childCount = parentNode.childCount;
    let start = $cursor.pos - $cursor.textOffset, end = parentNode.child(cursorNodeIndex).nodeSize, index, nodeSize;
    index = cursorNodeIndex - 1;
    while (index >= 0 && mark.isInSet(parentNode.child(index).marks)) {
        nodeSize = parentNode.child(index).nodeSize;
        end += nodeSize;
        start -= nodeSize;
        index -= 1;
    }
    index = cursorNodeIndex + 1;
    while (index < childCount && mark.isInSet(parentNode.child(index).marks)) {
        end += parentNode.child(index).nodeSize;
        index += 1;
    }
    return { from: start, to: start + end };
}
/**
 * @hidden
 */
const modifyMark = (markType, attrs) => (state, dispatch) => {
    const tr = state.tr;
    const { $cursor, from, to } = state.selection;
    if (!$cursor) {
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (node.isInline && markType.isInSet(node.marks)) {
                tr.removeMark(pos, pos + node.nodeSize, markType);
                tr.addMark(pos, pos + node.nodeSize, markType.create(attrs));
                dispatch(tr);
            }
        });
    }
    else {
        const parentNode = $cursor.parent;
        const cursorNodeIndex = $cursor.index();
        const mark = parentNode.child(cursorNodeIndex).marks.find(m => m.type === markType);
        const childCount = parentNode.childCount;
        let markStart = $cursor.pos - $cursor.textOffset, markSize = parentNode.child(cursorNodeIndex).nodeSize, index, nodeSize;
        index = cursorNodeIndex - 1;
        while (index >= 0 && mark && mark.isInSet(parentNode.child(index).marks)) {
            nodeSize = parentNode.child(index).nodeSize;
            markSize += nodeSize;
            markStart -= nodeSize;
            index -= 1;
        }
        index = cursorNodeIndex + 1;
        while (index < childCount && mark.isInSet(parentNode.child(index).marks)) {
            markSize += parentNode.child(index).nodeSize;
            index += 1;
        }
        tr.removeMark(markStart, markStart + markSize, markType);
        tr.addMark(markStart, markStart + markSize, markType.create(attrs));
        dispatch(tr);
    }
};
/**
 * @hidden
 */
const addStyles = (node, stylesToApply) => {
    let currentStyles = node.attrs.style, changedStyleResult = null, toChange = null;
    if (currentStyles) {
        stylesToApply.forEach(style => {
            toChange = { style: style.name, value: /^.+$/, newValue: style.value };
            changedStyleResult = changeStyles(currentStyles, toChange);
            currentStyles = changedStyleResult.changed ? changedStyleResult.style : currentStyles;
        });
    }
    const reducer = (acc, curr) => ((acc && curr.value ? acc + ' ' : '') + curr.value ? `${curr.name}: ${curr.value};` : '');
    currentStyles = currentStyles || stylesToApply.reduce(reducer, '');
    return Object.assign({}, node.attrs, { style: currentStyles || null });
};

/**
 * @hidden
 */
const indentRules = [
    {
        node: 'paragraph',
        step: 30,
        style: 'margin-left',
        unit: 'px'
    },
    {
        node: 'heading',
        step: 30,
        style: 'margin-left',
        unit: 'px'
    }
];
/**
 * @hidden
 */
const outdentRules = [
    {
        node: 'paragraph',
        step: -30,
        style: 'margin-left',
        unit: 'px'
    },
    {
        node: 'heading',
        step: -30,
        style: 'margin-left',
        unit: 'px'
    }
];

const { bulletList, doc, listItem, orderedList } = schema.nodes;
const getTypeName = (n) => {
    return n instanceof Node ? n.type.name : n.name;
};
const isListType = (node) => {
    const nodeName = typeof node === 'string' ? node : getTypeName(node);
    return nodeName === getTypeName(orderedList) || nodeName === getTypeName(bulletList);
};
const getListTypeFromPos = (pos) => Array.from(new Array(pos.depth), (_, index) => pos.depth - index)
    .map((depth) => pos.node(depth))
    .map(getTypeName)
    .find(isListType);
const getNodeMarksOfType = (markType, n) => n.marks.filter(m => m.type.name === markType.name);
const findParentNode = (predicate) => {
    return (selection) => {
        const { $from } = selection;
        for (let i = $from.depth; i > 0; i--) {
            const node = $from.node(i);
            if (predicate(node)) {
                return { depth: i, node };
            }
        }
    };
};
const findNthParentNode = (predicate, depth = 1) => {
    return (selection) => {
        const { $from } = selection;
        for (let i = $from.depth; i > 0; i--) {
            const node = $from.node(i);
            if (predicate(node)) {
                depth = depth - 1;
                if (depth === 0) {
                    return { depth: i, node };
                }
            }
        }
    };
};
const findNthParentNodeOfType = (nodeType, depth = 1) => {
    return (selection) => {
        return findNthParentNode((node) => getTypeName(node) === getTypeName(nodeType), depth)(selection);
    };
};
/**
 * @hidden
 */
const getUniqueStyleValues = (style, cssStyle) => {
    if (style.hasNodesWithoutMarks) {
        return '';
    }
    const uniqueMarkValues = style.marks
        .filter(m => m.type.name === 'style')
        .map((m) => m.attrs.style)
        .map(split(';'))
        .map(filter$1((m) => m.includes(cssStyle)))
        // guards against empty array
        .map((cssStyleValues) => (cssStyleValues.length !== 0 ? cssStyleValues : [`${cssStyle}: INVALID`]))
        .map(first)
        .map(split(':'))
        .map(last)
        .map(trim)
        .reduce((acc, curr) => (acc.indexOf(curr) > -1 ? acc : [...acc, curr]), []);
    if (uniqueMarkValues.indexOf('INVALID') > -1 || uniqueMarkValues.length !== 1) {
        return '';
    }
    return uniqueMarkValues[0];
};
/**
 * @hidden
 */
const isMarkActive = (state, markType) => {
    const { from, $from, to, empty } = state.selection;
    if (empty) {
        return !!markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        return !!state.doc.rangeHasMark(from, to, markType);
    }
};
/**
 * @hidden
 */
const isNodeActive = (state, nodeType, attrs) => {
    const parent = findParentNode(node => getTypeName(node) === getTypeName(nodeType))(state.selection);
    if (!parent || (attrs && !Object.keys(attrs).length)) {
        return !!parent;
    }
    return parent.node.hasMarkup(nodeType, attrs);
};
/**
 * @hidden
 */
const isInListOfType = ({ selection }, nodeType) => {
    const { $anchor, $head } = selection;
    let topNodes = [];
    const anchorParentName = getListTypeFromPos($anchor);
    const headParentName = getListTypeFromPos($head);
    selection.content().content.descendants((n) => {
        topNodes = [...topNodes, n];
        return false;
    });
    const nonListTopNodes = topNodes.filter((n) => {
        return getTypeName(n) !== getTypeName(bulletList) && getTypeName(n) !== getTypeName(orderedList);
    });
    // no selection
    if (selection instanceof TextSelection && selection.$cursor) {
        return getListTypeFromPos(selection.$cursor) === nodeType.name;
    }
    const hasSingleUniqueTopNode = unique(topNodes.map(getTypeName)).length === 1;
    // with selection
    if (nonListTopNodes.length > 0 || !hasSingleUniqueTopNode) {
        return false;
    }
    // from this point on we have guaranteed that the top nodes are all of the same LIST type
    // same top list node
    const node = first(topNodes);
    let listChildNodes = [getTypeName(node)];
    node.descendants((childNode) => {
        if (isListType(childNode)) {
            listChildNodes = [...listChildNodes, getTypeName(childNode)];
        }
    });
    if (last(listChildNodes) !== nodeType.name) {
        return false;
    }
    return anchorParentName === headParentName && anchorParentName === nodeType.name;
};
/**
 * @hidden
 */
const getActiveMarks = ({ selection }, markType) => {
    let hasNodesWithoutMarks = false;
    if (selection instanceof TextSelection && selection.$cursor) {
        return {
            hasNodesWithoutMarks,
            marks: selection.$cursor.marks().filter(m => (markType ? m.type.name === markType.name : true))
        };
    }
    const filtered = [];
    selection.content().content.descendants((n) => {
        if (n.type.name === 'text') {
            const nodeMarksOfType = markType ? getNodeMarksOfType(markType, n) : n.marks;
            if (n.marks.length > 0 && nodeMarksOfType.length > 0) {
                filtered.push(...nodeMarksOfType);
            }
            else {
                hasNodesWithoutMarks = true;
            }
        }
    });
    return {
        hasNodesWithoutMarks,
        marks: filtered
    };
};
/**
 * @hidden
 */
const getNodeTagName = (node) => {
    const parseRules = node.type.spec.parseDOM || [];
    const nodeAttrs = node.attrs;
    let parseRule;
    if (parseRules.length === 1) {
        parseRule = parseRules[0];
    }
    else {
        // TODO: refactor this
        // removeEmptyEntries is needed due to the default attributes in the schema
        parseRule = parseRules.find((rule) => {
            // getAttrs needs a DOM Node
            const domNode = DOMSerializer.fromSchema(schema).serializeNode(node);
            return JSON.stringify(rule.getAttrs(domNode)) === JSON.stringify(removeEmptyEntries(nodeAttrs));
        });
    }
    if (parseRule) {
        // regex is needed since image node has tag = img[src]
        // https://stackoverflow.com/a/25777116
        return parseRule.tag.toLowerCase().replace(/ *\[[^\]]*]/, '');
    }
    else {
        return '';
    }
};
/**
 * @hidden
 */
const activeNode = (state) => {
    const isAllSelection = state.selection instanceof AllSelection;
    const isTextSelection = state.selection instanceof TextSelection;
    const isNodeSelection = state.selection instanceof NodeSelection;
    const isCellSelection = state.selection instanceof CellSelection;
    let node;
    if (isAllSelection) {
        node = state.doc;
    }
    else if (isTextSelection || isCellSelection) {
        const $anchor = state.selection.$anchor;
        const blockNode = $anchor.node($anchor.blockRange().depth);
        const isDoc = getTypeName(blockNode) === getTypeName(doc);
        node = isDoc ? $anchor.node() : blockNode;
    }
    else if (isNodeSelection) {
        const selection = state.selection;
        node = selection.node;
    }
    return {
        name: getTypeName(node),
        tag: getNodeTagName(node)
    };
};
/**
 * @hidden
 */
const canIndent = (state, nodeType) => {
    return isNodeActive(state, nodeType) && sinkListItem(nodeType)(state);
};
/**
 * @hidden
 */
const canOutdent = (state, nodeType) => {
    const isNestedInOL = !!findNthParentNodeOfType(orderedList, 2)(state.selection);
    const isNestedInUL = !!findNthParentNodeOfType(bulletList, 2)(state.selection);
    return isNodeActive(state, nodeType) && (isNestedInOL || isNestedInUL) && liftListItem(nodeType)(state);
};
/**
 * @hidden
 */
const getMark = (state, markType) => {
    let { from, $from, to, empty } = state.selection;
    const stateDoc = state.doc;
    let mark;
    if (empty) {
        mark = markType.isInSet(state.storedMarks || $from.marks());
    }
    else {
        stateDoc.nodesBetween(from, to, node => {
            if (node.isInline && !mark) {
                mark = markType.isInSet(node.marks);
            }
        });
    }
    return mark;
};
/**
 * @hidden
 */
const getNodeFromSelection = (state) => {
    if (state.selection instanceof NodeSelection) {
        return state.selection.node;
    }
};
/**
 * @hidden
 */
const getSelectionText = (state) => {
    const sel = state.selection;
    if (sel instanceof TextSelection || sel instanceof AllSelection) {
        const fragment = sel.content().content;
        return fragment.textBetween(0, fragment.size);
    }
    return '';
};
/**
 * @hidden
 */
const getHTML = (state) => {
    const fragment = DOMSerializer.fromSchema(state.schema).serializeFragment(state.doc.content);
    const element = document.createElement('div');
    element.appendChild(fragment);
    return element.innerHTML;
};
/**
 * @hidden
 */
const createContentNode = (value) => {
    const element = document.createElement('div');
    // when using ngModel with name attr, content is null and errors, default params dont help
    element.innerHTML = safeString(value).trim();
    return DOMParser.fromSchema(schema).parse(element);
};
/**
 * @hidden
 */
const hasSameMarkup = (dom1, dom2) => {
    const fragment1 = Fragment.from(createContentNode(dom1));
    const fragment2 = Fragment.from(createContentNode(dom2));
    return fragment1.eq(fragment2);
};
/**
 * @hidden
 * Checks if the selection contains a specific type of node.
 */
const hasNode = (state, nodeType) => {
    let { from, to } = state.selection;
    let result = false;
    state.doc.nodesBetween(from, to, node => {
        result = result || node.type === nodeType;
        return !result;
    });
    return result;
};
/**
 * @hidden
 */
const blockNodes = (state) => {
    const selection = state.selection;
    let { from, to, $from } = selection;
    const result = [];
    if (selection.node) {
        if (selection.node.isBlock) {
            result.push(selection.node);
        }
        else if ($from.parent && $from.parent.isBlock) {
            result.push($from.parent);
        }
    }
    else {
        state.doc.nodesBetween(from, to, node => {
            if (node.isBlock) {
                result.push(node);
            }
        });
    }
    return result;
};
/**
 * @hidden
 * Checks if any block element in the selection is aligned.
 */
const isAligned = (state, actions) => {
    const blocks = blockNodes(state);
    let result = false;
    blocks.forEach(node => {
        if (!result && node.type.isTextblock && node.attrs.style) {
            const action = actions.find(a => a.node === node.type.name);
            if (action) {
                result = action.style.every(style => {
                    return !!style.value && new RegExp(`${style.name}:\\s?${style.value}`, 'i').test(node.attrs.style);
                });
            }
        }
    });
    return result;
};
/**
 * @hidden
 * Checks if any block element in the selection is indented.
 */
const isIndented = (state, actions) => {
    const blocks = blockNodes(state);
    let result = false;
    blocks.forEach(node => {
        if (!result && node.type.isTextblock && node.attrs.style) {
            const action = actions.find(a => a.node === node.type.name);
            if (action) {
                const reIndent = new RegExp(`${action.style}:\\s?\\d+${action.unit}`, 'i');
                result = reIndent.test(node.attrs.style);
            }
        }
    });
    return result;
};
/**
 * @hidden
 */
const canIndentAsListItem = (state) => sinkListItem(listItem)(state);
/**
 * @hidden
 */
const canOutdentAsListItem = (state) => liftListItem(listItem)(state);
/**
 * @hidden
 */
const canBeIndented = (state, rules) => {
    const nodes = state.schema.nodes;
    return ((isIndented(state, rules) || indentRules.some(rule => nodes[rule.node] && hasNode(state, nodes[rule.node]))) &&
        !hasNode(state, listItem));
};

const { blockquote, heading, listItem: listItem$1, paragraph, image } = schema.nodes;
/**
 * @hidden
 */
const removeMark = (markType) => (state, dispatch) => {
    const { from, to, $cursor } = state.selection;
    if ($cursor) {
        let resolvedRange = getMarkRange($cursor, markType);
        dispatch(state.tr.removeMark(resolvedRange.from, resolvedRange.to, markType));
    }
    else {
        dispatch(state.tr.removeMark(from, to, markType));
    }
};
/**
 * @hidden
 */
const removeAllMarks = ({ except = [] } = {}) => (state, dispatch) => {
    const { $cursor, from, to } = state.selection;
    const tr = state.tr;
    const excludedMarkTypes = toArray(except).map(mt => mt.name);
    if (!$cursor) {
        Object.keys(schema.marks)
            .map(m => schema.marks[m])
            .filter(mt => excludedMarkTypes.indexOf(mt.name) === -1)
            .forEach(mt => tr.removeMark(from, to, mt));
        dispatch(tr);
    }
};
/**
 * @hidden
 */
const toggleBold = toggleMark(schema.marks.strong);
/**
 * @hidden
 */
const toggleItalic = toggleMark(schema.marks.em);
/**
 * @hidden
 */
const toggleUnderline = toggleMark(schema.marks.underline);
/**
 * @hidden
 */
const toggleStrikethrough = toggleMark(schema.marks.strikethrough);
/**
 * @hidden
 */
const toggleSubscript = toggleMark(schema.marks.subscript);
/**
 * @hidden
 */
const toggleSuperscript = toggleMark(schema.marks.superscript);
/**
 * @hidden
 */
const setFontFamily = (font) => (state, dispatch) => {
    const marks = state.schema.marks;
    const cmd = changeStyle(marks.style, {
        newValue: font,
        style: 'font-family',
        value: /^.+$/
    });
    return cmd(state, dispatch);
};
/**
 * @hidden
 */
const setFontSize = (size) => (state, dispatch) => {
    const marks = state.schema.marks;
    const cmd = changeStyle(marks.style, {
        newValue: `${size}px`,
        style: 'font-size',
        value: /^.+$/
    });
    return cmd(state, dispatch);
};
/**
 * @hidden
 */
const createLink = (attrs) => (state, dispatch) => {
    if (isMarkActive(state, schema.marks.link)) {
        modifyMark(schema.marks.link, attrs)(state, dispatch);
    }
    else if (state.selection.empty) {
        if (isDevMode() && !isPresent(attrs.text)) {
            throw new Error(
            // tslint:disable-next-line:max-line-length
            "Unable to create link without text. Please pass a 'text' property as part of the parameter or select any text in the Editor.");
        }
        const newLink = schema.text(attrs.text, [schema.marks.link.create(attrs), ...getActiveMarks(state).marks]);
        dispatch(state.tr.replaceSelectionWith(newLink, false));
    }
    else {
        toggleMark(schema.marks.link, attrs)(state, dispatch);
    }
};
/**
 * @hidden
 */
const addOrUpdateStyle = (cssProp, value) => (state, dispatch) => {
    const marks = state.schema.marks;
    const selectionPresent = !state.selection.empty;
    if (selectionPresent || isMarkActive(state, marks.style)) {
        const cmd = changeStyle(marks.style, {
            style: cssProp,
            value: /^.+$/,
            newValue: value
        });
        cmd(state, dispatch);
    }
    else {
        const styles = marks.style.create({ style: `${cssProp}: ${value}` });
        const transaction = state.tr.addStoredMark(styles);
        dispatch(transaction);
    }
};
/**
 * @hidden
 */
const applyHeading = (level) => setBlockType(heading, { level });
/**
 * @hidden
 */
const applyParagraph = setBlockType(paragraph);
/**
 * @hidden
 */
const applyBlockquote = setBlockType(blockquote);
/**
 * @hidden
 */
const format = ({ tag }) => {
    if (tag.match(/h\d\b/)) {
        return applyHeading(parseInt(tag[1], 10));
    }
    else if (tag === 'p') {
        return applyParagraph;
    }
    else if (tag === 'blockquote') {
        return applyBlockquote;
    }
};
/**
 * @hidden
 */
const insertImage = (attrs) => (state, dispatch) => {
    const node = image.createAndFill(attrs);
    dispatch(state.tr.replaceSelectionWith(node));
};
/**
 * @hidden
 */
const insertText = (attrs) => (state, dispatch) => {
    dispatch(state.tr.insertText(attrs.text, attrs.from, attrs.to));
};
/**
 * @hidden
 */
const setHTML = (content) => (state, dispatch) => dispatch(state.tr.setSelection(new AllSelection(state.doc)).replaceSelectionWith(createContentNode(content)));
/**
 * @hidden
 * Aligning block elements in the selection.
 *
 * @returns {boolean} - Returns true if any alignment is applied.
 */
const alignBlocks = (actions) => (state, dispatch) => {
    const blocks = blockNodes(state);
    const tr = state.tr;
    let result = false;
    blocks.forEach(node => {
        if (node.type.isTextblock) {
            let newAttrs = {};
            const action = actions.find(n => n.node === node.type.name);
            if (action) {
                newAttrs = addStyles(node, action.style);
            }
            result = changeBlockNode(state, dispatch, tr, node, node.type, newAttrs) || result;
        }
    });
    if (result) {
        dispatch(tr.scrollIntoView());
    }
    return result;
};
/**
 * Indenting block elements in the selection.
 *
 * @returns {boolean} - Returns true if any indentation is applied.
 */
const indentBlocks = (actions) => (state, dispatch) => {
    const blocks = blockNodes(state);
    const tr = state.tr;
    let result = false;
    blocks.forEach(node => {
        if (node.type.isTextblock) {
            let newAttrs;
            const action = actions.find(a => a.node === node.type.name);
            if (action) {
                const newStyle = {
                    name: action.style,
                    value: action.step > 0 ? `${action.step}${action.unit}` : ''
                };
                if (node.attrs.style) {
                    const re = new RegExp(`${action.style}:\\s?(\\d+)${action.unit}`, 'i');
                    const match = node.attrs.style.match(re);
                    if (match) {
                        let newMargin = parseFloat(match[1]) + action.step;
                        newMargin = newMargin <= 0 ? '' : newMargin;
                        newStyle.value = `${newMargin}${newMargin ? action.unit : ''}`;
                    }
                }
                newAttrs = addStyles(node, [newStyle]);
            }
            if (newAttrs) {
                result = changeBlockNode(state, dispatch, tr, node, node.type, newAttrs) || result;
            }
        }
    });
    if (result) {
        dispatch(tr.scrollIntoView());
    }
    return result;
};
/**
 * @hidden
 */
const indent = (state, dispatch) => {
    const isIndentableBlock = canBeIndented(state, indentRules);
    if (canIndentAsListItem(state)) {
        sinkListItem(listItem$1)(state, dispatch);
    }
    else if (isIndentableBlock) {
        indentBlocks(indentRules)(state, dispatch);
    }
};
/**
 * @hidden
 */
const outdent = (state, dispatch) => {
    const isIndentableBlock = canBeIndented(state, outdentRules);
    if (canOutdentAsListItem(state)) {
        liftListItem(listItem$1)(state, dispatch);
    }
    else if (isIndentableBlock) {
        indentBlocks(outdentRules)(state, dispatch);
    }
};
/**
 * @hidden
 */
const insertNode = (node, scrollIntoView) => (state, dispatch) => {
    const tr = state.tr.replaceSelectionWith(node);
    if (scrollIntoView) {
        tr.scrollIntoView();
    }
    dispatch(tr);
};
/**
 * @hidden
 */
const createTable = (nodes, rows, columns) => {
    const { table, table_row, table_cell } = nodes;
    const tableRows = [];
    const cells = [];
    for (let r = 0; r < rows + 1; r++) {
        cells.length = 0;
        for (let c = 0; c < columns + 1; c++) {
            cells.push(table_cell.createAndFill());
        }
        tableRows.push(table_row.createAndFill(undefined, cells));
    }
    return table.createAndFill(undefined, tableRows);
};
/**
 * @hidden
 */
const insertTable = (attrs) => (state, dispatch) => {
    const newTable = createTable(state.schema.nodes, attrs.rows, attrs.cols);
    if (newTable) {
        insertNode(newTable, true)(state, dispatch);
    }
};

const ɵ0$5 = () => toggleBold;
const ɵ1$3 = () => removeAllMarks({ except: schema.marks.link });
const ɵ2$3 = attr => createLink(attr);
const ɵ3$3 = font => setFontFamily(font);
const ɵ4$3 = size => setFontSize(size);
const ɵ5$2 = attr => createLink(attr);
const ɵ6$2 = text => insertText(text);
const ɵ7$2 = () => toggleItalic;
const ɵ8$1 = () => toggleStrikethrough;
const ɵ9$1 = () => toggleSubscript;
const ɵ10$1 = () => toggleSuperscript;
const ɵ11$1 = () => toggleUnderline;
const ɵ12$1 = () => removeMark(schema.marks.link);
const ɵ13$1 = (color) => addOrUpdateStyle('color', color);
const ɵ14$1 = (color) => addOrUpdateStyle('background-color', color);
const inlineCommand = {
    bold: ɵ0$5,
    cleanFormatting: ɵ1$3,
    createLink: ɵ2$3,
    fontFamily: ɵ3$3,
    fontSize: ɵ4$3,
    insertFile: ɵ5$2,
    insertText: ɵ6$2,
    italic: ɵ7$2,
    strikethrough: ɵ8$1,
    subscript: ɵ9$1,
    superscript: ɵ10$1,
    underline: ɵ11$1,
    unlink: ɵ12$1,
    foreColor: ɵ13$1,
    backColor: ɵ14$1
};
const ɵ15$1 = () => alignBlocks(alignCenterRules);
const ɵ16$1 = () => alignBlocks(alignRemoveRules);
const ɵ17$1 = () => alignBlocks(alignLeftRules);
const ɵ18$1 = () => alignBlocks(alignRightRules);
const ɵ19$1 = formatAttr => format(formatAttr);
const ɵ20$1 = () => getHTML;
const ɵ21$1 = () => indent;
const ɵ22$1 = attrs => insertImage(attrs);
const ɵ23$1 = () => toggleOrderedList;
const ɵ24$1 = () => toggleUnorderedList;
const ɵ25$1 = () => outdent;
const ɵ26$1 = () => redo;
const ɵ27$1 = content => setHTML(content);
const ɵ28$1 = () => undo;
const blockCommand = {
    alignCenter: ɵ15$1,
    alignJustify: ɵ16$1,
    alignLeft: ɵ17$1,
    alignRight: ɵ18$1,
    format: ɵ19$1,
    getHTML: ɵ20$1,
    indent: ɵ21$1,
    insertImage: ɵ22$1,
    // think about changing the command name.
    insertOrderedList: ɵ23$1,
    // think about changing the command name.
    insertUnorderedList: ɵ24$1,
    outdent: ɵ25$1,
    redo: ɵ26$1,
    setHTML: ɵ27$1,
    undo: ɵ28$1
};
const ɵ29$1 = attr => insertTable(attr);
const ɵ30$1 = () => addColumnBefore;
const ɵ31$1 = () => addColumnAfter;
const ɵ32 = () => addRowBefore;
const ɵ33 = () => addRowAfter;
const ɵ34 = () => deleteRow;
const ɵ35 = () => deleteColumn;
const ɵ36 = () => mergeCells;
const ɵ37 = () => splitCell;
const ɵ38 = () => deleteTable;
const tableCommand = {
    insertTable: ɵ29$1,
    addColumnBefore: ɵ30$1,
    addColumnAfter: ɵ31$1,
    addRowBefore: ɵ32,
    addRowAfter: ɵ33,
    deleteRow: ɵ34,
    deleteColumn: ɵ35,
    mergeCells: ɵ36,
    splitCell: ɵ37,
    deleteTable: ɵ38
};
/**
 * @hidden
 */
const editorCommands = Object.assign({}, inlineCommand, blockCommand, tableCommand);

/**
 * @hidden
 */
class EditorLocalizationService extends LocalizationService {
    constructor(prefix, messageService, _rtl) {
        super(prefix, messageService, _rtl);
    }
}
/** @nocollapse */
EditorLocalizationService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [L10N_PREFIX,] }] },
    { type: MessageService, decorators: [{ type: Optional }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }
];

// import { EditorService } from '../editor.service';
/**
 * @hidden
 */
class SourceDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = '';
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        this.editor.exec('setHTML', this.getData());
        this.dialog.close();
        this.editor.focus();
    }
    getData() {
        return this.textarea.nativeElement.value;
    }
    setData() {
        this.data = this.indent(this.editor.getSource());
    }
    textFor(key) {
        return this.localization.get(key);
    }
    indent(content) {
        return content
            .replace(/<\/(p|li|ul|ol|h[1-6]|table|tr|td|th)>/gi, '</$1>\n')
            .replace(/<(ul|ol)([^>]*)><li/gi, '<$1$2>\n<li')
            .replace(/<br \/>/gi, '<br />\n')
            .replace(/\n$/, '');
    }
}
SourceDialogComponent.decorators = [
    { type: Component, args: [{
                styles: [
                    `
            >>> .k-editor-textarea {
                height: 100%;
            }
        `
                ],
                template: `
        <kendo-dialog-titlebar>
            {{ textFor('viewSource') }}
        </kendo-dialog-titlebar>
        <textarea [value]="data" #textarea class="k-editor-textarea k-input"></textarea>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogUpdate') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
SourceDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
SourceDialogComponent.propDecorators = {
    editor: [{ type: Input }],
    textarea: [{ type: ViewChild, args: ['textarea',] }]
};

/**
 * @hidden
 */
class ImageDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.src = new FormControl('', Validators.required);
        this.alt = new FormControl('');
        this.width = new FormControl('', Validators.min(1));
        this.height = new FormControl('', Validators.min(1));
        this.data = {
            alt: '',
            height: '',
            src: '',
            width: ''
        };
        this.imageData = new FormGroup({
            alt: this.alt,
            height: this.height,
            src: this.src,
            width: this.width
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.src.value) {
            this.editor.exec('insertImage', this.getData());
            this.dialog.close();
            this.editor.focus();
        }
    }
    setData(state) {
        const node = getNodeFromSelection(state);
        if (node) {
            this.src.patchValue(node.attrs.src);
            this.alt.patchValue(node.attrs.alt);
            this.width.patchValue(node.attrs.width);
            this.height.patchValue(node.attrs.height);
        }
    }
    textFor(key) {
        return this.localization.get(key);
    }
    getData() {
        return {
            alt: this.alt.value,
            height: this.normalizeDimension(this.height.value),
            src: this.src.value,
            width: this.normalizeDimension(this.width.value)
        };
    }
    normalizeDimension(value) {
        return Number.isNaN(parseInt(value, 10)) || parseInt(value, 10) <= 0 ? '' : safeString(parseInt(value, 10));
    }
}
ImageDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            {{ textFor('insertImage') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content">
                    <div class="k-edit-label">
                        <label for="k-editor-image-url">{{ textFor('imageWebAddress') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="src" type="text" class="k-input k-textbox" />
                    </div>
                    <div class="k-edit-label">
                        <label for="k-editor-image-text">{{ textFor('imageAltText') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="alt" type="text" class="k-input k-textbox" />
                    </div>
                    <div class="k-edit-label">
                        <label for="k-editor-image-width">{{ textFor('imageWidth') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="width" type="text" class="k-input k-textbox" />
                    </div>
                    <div class="k-edit-label">
                        <label for="k-editor-image-height">{{ textFor('imageHeight') }}</label>
                    </div>
                    <div class="k-edit-field">
                        <input [formControl]="height" type="text" class="k-input k-textbox" />
                    </div>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton [disabled]="imageData.invalid"
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogInsert') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
ImageDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
ImageDialogComponent.propDecorators = {
    editor: [{ type: Input }]
};

/**
 * @hidden
 */
class FileLinkDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.linkForm = new FormGroup({
            'href': new FormControl('', Validators.required),
            'text': new FormControl('', Validators.required),
            'title': new FormControl('')
        });
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        const linkData = this.getData();
        this.editor.exec(this.command, linkData);
        this.dialog.close();
        this.editor.focus();
    }
    get titleText() {
        return this.localization.get(this.command);
    }
    setData(state) {
        if (this.command === 'createLink') {
            this.linkForm.addControl('target', new FormControl());
        }
        const linkMark = getMark(state, schema.marks.link);
        if (linkMark) {
            // const linkMarkRange = getMarkRange(state.selection.$cursor, schema.marks.link);
            // const mark = parentNode.child(cursorNodeIndex).marks.find(m => m.type === markType);
            this.linkForm.reset({
                href: linkMark.attrs.href,
                title: linkMark.attrs.title,
                target: isPresent(linkMark.attrs.target),
                text: this.setLinkText(state)
            });
            return;
        }
        if (!state.selection.empty) {
            this.linkForm.patchValue({
                'text': getSelectionText(state)
            });
        }
    }
    textForWithPrefix(key) {
        const prefix = this.command === 'createLink' ? 'link' : 'file';
        return this.textFor(prefix + key);
    }
    textFor(key) {
        return this.localization.get(key);
    }
    setLinkText(state) {
        const selection = state.selection;
        if (selection.empty && selection.$cursor) {
            const cursor = selection.$cursor;
            const cursorNodeIndex = cursor.index();
            const parentNode = cursor.parent;
            return parentNode.child(cursorNodeIndex).text;
        }
        else {
            return getSelectionText(state);
        }
    }
    getData() {
        let linkData = this.linkForm.value;
        if (isPresent(this.linkForm.controls.target)) {
            linkData.target = linkData.target ? '_blank' : null;
        }
        return linkData;
    }
}
FileLinkDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            {{ titleText }}
        </kendo-dialog-titlebar>
        <div class='k-editor-dialog'>
            <div class='k-editor-dialog k-popup-edit-form k-window-content k-content'>
                <div class='k-edit-form-container k-window-content'>
                    <form novalidate [formGroup]='linkForm'>
                        <div class='k-edit-label'>
                            <label (click)='hrefInput.focus()'>{{ textForWithPrefix('WebAddress') }}</label>
                        </div>
                        <div class='k-edit-field'>
                            <input #hrefInput formControlName='href' type='text' class='k-input k-textbox'>
                        </div>

                        <div class='k-edit-label'>
                            <label (click)='textInput.focus()'>{{ textForWithPrefix('Text') }}</label>
                        </div>
                        <div class='k-edit-field'>
                            <input #textInput formControlName='text' type='text' class='k-input k-textbox'>
                        </div>

                        <div class='k-edit-label'>
                            <label (click)='titleInput.focus()'>{{ textForWithPrefix('Title') }}</label>
                        </div>
                        <div class='k-edit-field'>
                            <input #titleInput formControlName='title' type='text' class='k-input k-textbox'>
                        </div>
                        <ng-container *ngIf="command === 'createLink'">
                            <div class='k-edit-label'></div>
                            <div class='k-edit-field'>
                                <input type='checkbox' id='k-target-blank' class='k-checkbox' formControlName='target'>
                                <label class='k-checkbox-label' for='k-target-blank'>{{ textForWithPrefix('OpenInNewWindow') }}</label>
                            </div>
                        </ng-container>
                    </form>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)='onCancelAction()'>{{ textFor('dialogCancel') }}</button>
            <button kendoButton [disabled]='linkForm.invalid'
                    (click)='onConfirmAction()' [primary]='true'>{{ textFor('dialogInsert') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
FileLinkDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
FileLinkDialogComponent.propDecorators = {
    editor: [{ type: Input }],
    command: [{ type: Input }]
};

/**
 * @hidden
 */
const getToolbarState = (state) => ({
    alignCenter: isAligned(state, alignCenterRules),
    alignJustify: isAligned(state, alignRemoveRules),
    alignLeft: isAligned(state, alignLeftRules),
    alignRight: isAligned(state, alignRightRules),
    bold: isMarkActive(state, schema.marks.strong),
    cleanFormatting: state.selection.empty,
    format: activeNode(state),
    indent: canIndent(state, schema.nodes.listItem) || canBeIndented(state, indentRules),
    insertOrderedList: isInListOfType(state, schema.nodes.orderedList),
    insertUnorderedList: isInListOfType(state, schema.nodes.bulletList),
    italic: isMarkActive(state, schema.marks.em),
    link: isMarkActive(state, schema.marks.link),
    noSelection: state.selection.empty,
    outdent: canOutdent(state, schema.nodes.listItem) || canBeIndented(state, outdentRules),
    redo: !redo(state),
    strikethrough: isMarkActive(state, schema.marks.strikethrough),
    style: getActiveMarks(state, schema.marks.style),
    subscript: isMarkActive(state, schema.marks.subscript),
    superscript: isMarkActive(state, schema.marks.superscript),
    underline: isMarkActive(state, schema.marks.underline),
    undo: !undo(state),
    insertTable: false,
    addColumnBefore: !addColumnBefore(state),
    addColumnAfter: !addColumnAfter(state),
    addRowBefore: !addRowBefore(state),
    addRowAfter: !addRowAfter(state),
    deleteRow: !deleteRow(state),
    deleteColumn: !deleteColumn(state),
    mergeCells: !mergeCells(state),
    splitCell: !splitCell(state),
    deleteTable: !deleteTable(state)
});
/**
 * @hidden
 */
const initialToolBarState = {
    //marks
    bold: false,
    italic: false,
    underline: false,
    strikethrough: false,
    unlink: true,
    subscript: false,
    superscript: false,
    style: { marks: [], hasNodesWithoutMarks: false },
    //nodes
    format: { text: 'Format', tag: null },
    insertOrderedList: false,
    insertUnorderedList: false,
    indent: false,
    outdent: false,
    alignLeft: false,
    alignCenter: false,
    alignRight: false,
    alignJustify: false,
    //history
    undo: true,
    redo: true,
    //selection
    noSelection: true,
    cleanFormatting: true,
    //table
    insertTable: false,
    addColumnBefore: true,
    addColumnAfter: true,
    addRowBefore: true,
    addRowAfter: true,
    deleteRow: true,
    deleteColumn: true,
    mergeCells: true,
    splitCell: true,
    deleteTable: true
};

/**
 * @hidden
 */
const defaultStyle = `
html, body {
    margin: 0;
    height: 100%;
    padding: 0;
}

html {
  min-height: 100%;
}

body {
  box-sizing: border-box;
  position: relative;
  word-wrap: break-word;
  padding: 8px;
}

body > .k-content {
  outline: 0;
  height: 100%;
}

.k-content > p {
  margin: 0 0 1em;
}

.k-content .ProseMirror-selectednode {
  outline: 2px solid #8cf;
}

div.ProseMirror {
  height: 100%;
}

div.ProseMirror:focus {
  outline: none;
}

.ProseMirror-hideselection *::selection { background: transparent; }
.ProseMirror-hideselection *::-moz-selection { background: transparent; }
.ProseMirror-hideselection { caret-color: transparent; }

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}
`;
/**
 * @hidden
 */
const tablesStyles = `
  .ProseMirror .tableWrapper {
    overflow-x: auto;
    margin: 1em 0;
  }

  .ProseMirror table {
    margin: 0;
    border-collapse: collapse;
    table-layout: fixed;
    width: 100%;
    overflow: hidden;
  }

  .ProseMirror td, .ProseMirror th {
    min-width: 1em;
    border: 1px solid #ddd;
    padding: 3px 5px;
    vertical-align: top;
    box-sizing: border-box;
    position: relative;
  }

  .ProseMirror th {
    font-weight: bold;
    text-align: left;
  }

  .ProseMirror .column-resize-handle {
    position: absolute;
    right: -2px; top: 0; bottom: 0;
    width: 4px;
    z-index: 20;
    background-color: #adf;
    pointer-events: none;
  }

  .ProseMirror.resize-cursor {
    cursor: ew-resize;
    cursor: col-resize;
  }

  /* Give selected cells a blue overlay */
  .ProseMirror .selectedCell:after {
    z-index: 2;
    position: absolute;
    content: "";
    left: 0; right: 0; top: 0; bottom: 0;
    background: rgba(200, 200, 255, 0.4);
    pointer-events: none;
  }
`;
/**
 * @hidden
 */
const rtlStyles = 'body { direction: rtl }';

const EMPTY_PARAGRAPH = '<p></p>';
const firefox = isDocumentAvailable() ? /Firefox/.test(navigator.userAgent) : false;
/**
 * Represents the [Kendo UI Editor component for Angular]({% slug overview_editor %}).
 */
class EditorComponent {
    constructor(dialogService, localization, cdr, ngZone) {
        this.dialogService = dialogService;
        this.localization = localization;
        this.cdr = cdr;
        this.ngZone = ngZone;
        /**
         * If set to `false`, the Editor will run in style non-encapsulated mode. This means
         * that the styles of the page will be persisted in the Editor and its content will be affected by them.
         */
        this.iframe = true;
        /**
         * By design, the Editor emits `valueChange`, updates the model and the ToolBar state on each keystroke.
         * When you are interested in ignoring the new values for a given amout of time and take only the most recent one, you can use the `updateInterval` property.
         * A possible use case is to get the new values and to update the ToolBar state at a maximum rate per second in order to speed up your application.
         * The specified interval (in milliseconds) should be a positive number.
         * By default the `updateInterval` is set to 100 miliseconds. If set to zero the delay will be disabled entirely.
         */
        this.updateInterval = 100;
        /**
         * Fires each time the value of the Editor is changed upon user interaction&mdash;
         * for example, when the component is blurred or the value is updated through the `viewSource` dialog.
         * When the value of the Editor is programmatically changed through its API (`ngModel`) or form binding (`formControl`),
         * the `valueChange` event is not triggered because it might cause a mix-up with the
         * built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        this.hostClasses = true;
        /**
         * @hidden
         */
        this.stateChange = new BehaviorSubject(initialToolBarState);
        /**
         * @hidden
         */
        this.valueModified = new Subject();
        this.onChangeCallback = (_) => { }; // tslint:disable-line:no-empty
        this.onTouchedCallback = (_) => { }; // tslint:disable-line:no-empty
        this.direction = localization.rtl ? 'rtl' : 'ltr';
    }
    /**
     * Sets the value of the Editor ([see example]({% slug overview_editor %}#toc-basic-usage)).
     */
    set value(value) {
        this._value = value;
        this._previousValue = value;
        if (this.view) {
            this.exec('setHTML', this._value);
        }
    }
    get value() {
        let value = this.view ? this.getSource() : this._value;
        if (value === EMPTY_PARAGRAPH) {
            return this._value ? '' : this._value;
        }
        else {
            return value;
        }
    }
    get isIE() {
        return this.iframe && detectIE();
    }
    get dir() {
        return this.direction;
    }
    get toolbar() {
        return this.defaultToolbarComponent || this.userToolBarComponent;
    }
    get shouldInitOnLoad() {
        //should init onload when the browser is firefox and content is in an iframe
        return firefox && this.iframe;
    }
    ngOnInit() {
        this.subs = this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    ngAfterViewInit() {
        if (!this.shouldInitOnLoad) {
            this.initialize();
        }
    }
    /**
     * @hidden
     */
    iframeOnLoad() {
        if (this.shouldInitOnLoad) {
            this.initialize();
        }
    }
    /**
     * Executes a command on the currently selected text
     * ([more information and example]({% slug toolbartools_editor %}#toc-custom-tools)).
     *
     * @param {EditorCommand} commandName - The command that will be executed.
     * @param {any} attr - Optional parameters for the command. Apart from the following list,
     * the parameters do not expect specific attributes when you call them:
     * - `format` - Accepts an object with the `tag` property.
     * The supported tags are `p`, `blockquote`, and any of the `h1` to `h6` heading tags.
     * - `createLink` - Accepts an object with the `href`, `title`, and `target` properties. The `href` property is mandatory.
     * - `setHTML` - Accepts a `string` parameter.
     * - `insertTable` - Accepts an object with the `rows` and `cols` properties. The number values are zero based.
     *
     * @example
     * ```ts-no-run
     * // Toggles the bold styling.
     * editor.exec('bold');
     *
     * // Creates a bullet list.
     * editor.exec('insertUnorderedList');
     *
     * // Creates a link.
     * editor.exec('createLink', { href: 'www.progress.com', title: 'Progress', target: 'window' });
     *
     * // Inserts a file.
     * editor.exec('insertFile', { href: 'www.progress.com/resources/myfile.doc', title: 'My file', target: 'window' });
     *
     * // Inserts a image.
     * editor.exec('insertImage', { src: 'www.progress.com/resources/logo.jpg', title: 'Progress', target: 'window' });
     *
     * // Inserts a text at a given position. If no position is specified, the text will be inserted after the cursor.
     * editor.exec('insertText', { text: 'Hello World!', from: 0, to: 0 });
     *
     * // Changes the format of a text block.
     * editor.exec('format', { tag: 'h2' });
     *
     * // Changes the font size of the selected text.
     * editor.exec('fontSize', 24);
     *
     * // Changes the content of the Editor.
     * editor.exec('setHTML', '<p>HTML content</p>');
     *
     * // Creates and inserts a table with the specified number of rows and columns. Numbers are zero based.
     * this.editor.exec("insertTable", { rows: 3, cols: 5 });
     * ```
     */
    exec(commandName, attr) {
        // Finds a command and applies the attributes.
        const command = editorCommands[commandName](attr);
        // Executes a ProseMirror command.
        command(this.view.state, this.view.dispatch, this.view);
        // See the `dispatchTransaction` comments.
        // this.stateChange.emit(updateToolBar(this.view));
    }
    /**
     * Opens a dialog.
     * @param {DialogCommand} dialogName - The name of the dialog that will open.
     *
     * The supported values are:
     * * `createLink`
     * * `viewSource`
     * * `insertFile`
     * * `insertImage`
     * * `tableWizard`
     *
     * @example
     * ```ts-no-run
     * // Opens a `createLink` dialog.
     * editor.openDialog('createLink');
     *
     * // Opens a `viewSource` dialog.
     * editor.exec('viewSource');
     * ```
     */
    openDialog(dialogName) {
        const editorDialogs = {
            createLink: {
                content: FileLinkDialogComponent
            },
            insertFile: {
                content: FileLinkDialogComponent
            },
            insertImage: {
                content: ImageDialogComponent
            },
            viewSource: {
                content: SourceDialogComponent,
                height: 400,
                width: 500
            }
            // tableWizard: {
            //     content: TableWizardDialogComponent
            // }
        };
        const dialog = Object.assign({ appendTo: this.dialogContainer }, editorDialogs[dialogName]);
        this.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialog).content.instance;
        if (dialogName === 'createLink' || dialogName === 'insertFile') {
            dialogContent.command = dialogName;
        }
        dialogContent.editor = this;
        dialogContent.setData(this.view.state);
    }
    /**
     * Manually focus the Editor.
     */
    focus() {
        this.view.focus();
    }
    /**
     * Manually blur the Editor.
     */
    blur() {
        this.view.dom.blur();
    }
    /**
     * @hidden
     */
    getSource() {
        return getHTML(this.view.state);
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    /**
     * @hidden
     */
    writeValue(value) {
        // To avoid confusion, non-existent values are always undefined.
        this.value = value === null ? undefined : value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty() {
        return false;
    }
    initialize() {
        if (!isDocumentAvailable()) {
            return;
        }
        const that = this;
        const containerNativeElement = this.container.element.nativeElement;
        const contentNode = createContentNode(this.value);
        if (this.iframe) {
            const iframeDoc = containerNativeElement.contentDocument;
            const meta = iframeDoc.createElement('meta');
            meta.setAttribute('charset', 'utf-8');
            iframeDoc.head.appendChild(meta);
            [
                defaultStyle,
                tablesStyles,
                this.dir === 'rtl' ? rtlStyles : undefined
            ].forEach(styles => {
                if (styles) {
                    const style = iframeDoc.createElement('style');
                    style.appendChild(iframeDoc.createTextNode(styles));
                    iframeDoc.head.appendChild(style);
                }
            });
            const element = iframeDoc.createElement('div');
            iframeDoc.body.appendChild(element);
        }
        else {
            const element = document.createElement('div');
            containerNativeElement.appendChild(element);
        }
        const state = EditorState.create({
            schema: schema,
            doc: contentNode,
            plugins: [
                history(),
                keymap(buildListKeymap(schema)),
                keymap(buildKeymap(schema)),
                keymap(baseKeymap)
            ]
        });
        if (this.iframe) {
            this.viewMountElement = containerNativeElement.contentDocument.querySelector('div');
        }
        else {
            this.viewMountElement = containerNativeElement.querySelector('div');
        }
        this.ngZone.runOutsideAngular(() => {
            this.view = new EditorView({ mount: this.viewMountElement }, {
                state,
                dispatchTransaction: function (tr) {
                    // `this` is bound to the view instance.
                    this.updateState(this.state.apply(tr));
                    that.stateChange.next(getToolbarState(this.state));
                    // that.cdr.detectChanges();
                    // When the user utilizes keyboard shortcuts&mdash;for example, `Ctrl`+`b`&mdash;
                    // `tr.docChanged` is `true` and the toolbar is not updated.
                    // A possible future solution is to move the keymaps to the service.
                    // if (!tr.docChanged) {
                    //     that.stateChange.emit(updateToolBar(that.view));
                    // }
                    const value = that.value;
                    if (!hasSameMarkup(value, that._previousValue)) {
                        that._previousValue = value;
                        that.ngZone.run(() => that.valueModified.next(value));
                    }
                }
            });
        });
        this.subs.add(merge(this.stateChange.pipe(filter(() => this.updateInterval > 0), auditTime(this.updateInterval)), this.stateChange.pipe(filter(() => this.updateInterval === 0)))
            .subscribe(() => {
            if (this.userToolBarComponent) {
                this.userToolBarComponent.cdr.detectChanges();
            }
            else {
                this.cdr.detectChanges();
            }
        }));
        this.subs.add(merge(this.valueModified.pipe(filter(() => this.updateInterval > 0), auditTime(this.updateInterval)), this.valueModified.pipe(filter(() => this.updateInterval === 0)))
            .subscribe((value) => {
            that.onChangeCallback(value);
            this.valueChange.emit(value);
        }));
        this.subs.add(fromEvent(this.viewMountElement, 'keyup').pipe(map((e) => e.keyCode), filter((code) => code === 121), // F10
        map(() => this.userToolBarElement || this.defaultToolbar))
            .subscribe((toolbar) => toolbar.nativeElement.focus()));
        this.subs.add(fromEvent(this.viewMountElement, 'blur').pipe(filter((event) => !this.viewMountElement.contains(event.relatedTarget)))
            .subscribe(() => this.onTouchedCallback()));
    }
}
EditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-editor',
                providers: [
                    EditorLocalizationService,
                    {
                        provide: LocalizationService,
                        useExisting: EditorLocalizationService
                    },
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.editor'
                    },
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => EditorComponent),
                        multi: true
                    },
                    {
                        provide: KendoInput,
                        useExisting: forwardRef(() => EditorComponent)
                    }
                ],
                /* tslint:disable:max-line-length */
                template: `
        <ng-container kendoEditorLocalizedMessages
            i18n-alignCenter="kendo.editor.alignCenter|The title of the tool that aligns text in the center."
            alignCenter="Center text"

            i18n-alignJustify="kendo.editor.alignJustify|The title of the tool that justifies text both left and right."
            alignJustify="Justify"

            i18n-alignLeft="kendo.editor.alignLeft|The title of the tool that aligns text on the left."
            alignLeft="Align text left"

            i18n-alignRight="kendo.editor.alignRight|The title of the tool that aligns text on the right."
            alignRight="Align text right"

            i18n-backColor="kendo.editor.backColor|The title of the tool that changes the text background color."
            backColor="Background color"

            i18n-bold="kendo.editor.bold|The title of the tool that makes text bold."
            bold="Bold"

            i18n-cleanFormatting="kendo.editor.cleanFormatting|The title of the Clean Formatting tool."
            cleanFormatting="Clean formatting"

            i18n-createLink="kendo.editor.createLink|The title of the tool that creates hyperlinks."
            createLink="Insert link"

            i18n-dialogApply="kendo.editor.dialogApply|The label of the **Apply** button in all editor dialogs."
            dialogApply="Apply"

            i18n-dialogCancel="kendo.editor.dialogCancel|The label of the **Cancel** button in all editor dialogs."
            dialogCancel="Cancel"

            i18n-dialogInsert="kendo.editor.dialogInsert|The label of the **Insert** button in all editor dialogs."
            dialogInsert="Insert"

            i18n-dialogUpdate="kendo.editor.dialogUpdate|The label of the **Update** button in all editor dialogs."
            dialogUpdate="Update"

            i18n-fileText="kendo.editor.fileText|The caption for the file text in the insertFile dialog."
            fileText="Text"

            i18n-fileTitle="kendo.editor.fileTitle|The caption for the file Title in the insertFile dialog."
            fileTitle="Title"

            i18n-fileWebAddress="kendo.editor.fileWebAddress|The caption for the file URL in the insertFile dialog."
            fileWebAddress="Web address"

            i18n-fontFamily="kendo.editor.fontFamily|The title of the tool that changes the text font."
            fontFamily="Select font family"

            i18n-fontSize="kendo.editor.fontSize|The title of the tool that changes the text size."
            fontSize="Select font size"

            i18n-foreColor="kendo.editor.foreColor|The title of the tool that changes the text color."
            foreColor="Color"

            i18n-format="kendo.editor.format|The title of the tool that lets users choose block formats."
            format="Format"

            i18n-imageAltText="kendo.editor.imageAltText|The caption for the image alternate text in the insertImage dialog."
            imageAltText="Alternate text"

            i18n-imageHeight="kendo.editor.imageHeight|The caption for the image height in the insertImage dialog."
            imageHeight="Height (px)"

            i18n-imageWebAddress="kendo.editor.imageWebAddress|The caption for the image URL in the insertImage dialog."
            imageWebAddress="Web address"

            i18n-imageWidth="kendo.editor.imageWidth|The caption for the image width in the insertImage dialog."
            imageWidth="Width (px)"

            i18n-indent="kendo.editor.indent|The title of the tool that indents the content."
            indent="Indent"

            i18n-insertFile="kendo.editor.insertFile|The title of the tool that inserts links to files."
            insertFile="Insert file"

            i18n-insertImage="kendo.editor.insertImage|The title of the tool that inserts images."
            insertImage="Insert image"

            i18n-insertOrderedList="kendo.editor.insertOrderedList|The title of the tool that inserts an ordered list."
            insertOrderedList="Insert ordered list"

            i18n-insertUnorderedList="kendo.editor.insertUnorderedList|The title of the tool that inserts an unordered list."
            insertUnorderedList="Insert unordered list"

            i18n-italic="kendo.editor.italic|The title of the tool that makes text italicized."
            italic="Italic"

            i18n-linkOpenInNewWindow="kendo.editor.linkOpenInNewWindow|The caption for the checkbox for opening the link in a new window in the createLink dialog."
            linkOpenInNewWindow="Open link in new window"

            i18n-linkText="kendo.editor.linkText|The caption for the link text in the createLink dialog."
            linkText="Text"

            i18n-linkTitle="kendo.editor.linkTitle|The caption for the link title in the createLink dialog."
            linkTitle="Title"

            i18n-linkWebAddress="kendo.editor.linkWebAddress|The caption for the URL in the createLink dialog."
            linkWebAddress="Web address"

            i18n-outdent="kendo.editor.outdent|The title of the tool that outdents the content."
            outdent="Outdent"

            i18n-redo="kendo.editor.redo|The title of the tool that undos the last action."
            redo="Redo"

            i18n-strikethrough="kendo.editor.strikethrough|The title of the tool that strikes through text."
            strikethrough="Strikethrough"

            i18n-subscript="kendo.editor.subscript|The title of the tool that makes text subscript."
            subscript="Subscript"

            i18n-superscript="kendo.editor.superscript|The title of the tool that makes text superscript."
            superscript="Superscript"

            i18n-underline="kendo.editor.underline|The title of the tool that underlines text."
            underline="Underline"

            i18n-unlink="kendo.editor.unlink|The title of the tool that removes hyperlinks."
            unlink="Remove Link"

            i18n-undo="kendo.editor.undo|The title of the tool that undos the last action."
            undo="Undo"

            i18n-viewSource="kendo.editor.viewSource|The title of the tool that shows the editor value as HTML."
            viewSource="View source"

            i18n-insertTable="kendo.editor.insertTable|The title of the tool that inserts table."
            insertTable="Insert Table"

            i18n-addColumnBefore="kendo.editor.addColumnBefore|The title of the tool that adds new column before currently selected column."
            addColumnBefore="Add column before"

            i18n-addColumnAfter="kendo.editor.addColumnAfter|The title of the tool that adds new column after currently selected column."
            addColumnAfter="Add column after"

            i18n-addRowBefore="kendo.editor.addRowBefore|The title of the tool that adds new row before currently selected row."
            addRowBefore="Add row before"

            i18n-addRowAfter="kendo.editor.addRowAfter|The title of the tool that adds new row after currently selected row."
            addRowAfter="Add row after"

            i18n-deleteColumn="kendo.editor.deleteColumn|The title of the tool that deletes a table column."
            deleteColumn="Delete column"

            i18n-deleteRow="kendo.editor.deleteRow|The title of the tool that deletes a table row."
            deleteRow="Delete row"

            i18n-deleteTable="kendo.editor.deleteTable|The title of the tool that deletes a table."
            deleteTable="Delete table"
        >
        </ng-container>

        <ng-content select="kendo-toolbar"></ng-content>
        <kendo-toolbar [overflow]="true" *ngIf="!userToolBarElement" #defaultToolbar>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorBoldButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorItalicButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnderlineButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorAlignLeftButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignCenterButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignRightButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorAlignJustifyButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorInsertUnorderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorInsertOrderedListButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorIndentButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorOutdentButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-buttongroup>
                <kendo-toolbar-button kendoEditorCreateLinkButton></kendo-toolbar-button>
                <kendo-toolbar-button kendoEditorUnlinkButton></kendo-toolbar-button>
            </kendo-toolbar-buttongroup>
            <kendo-toolbar-button kendoEditorInsertImageButton></kendo-toolbar-button>
        </kendo-toolbar>

        <div *ngIf="!iframe" #content [attr.dir]="direction" class="k-content"></div>

        <iframe *ngIf="iframe" #content frameborder="0" class="k-content" (load)="iframeOnLoad()"></iframe>

        <ng-container #dialogsContainer></ng-container>
    `,
                /* tslint:enable:max-line-length */
                styles: [`
        >>> .k-content > .ProseMirror {
            height: 100%;
            width: 100%;
            box-sizing: border-box;
            outline: none;
            overflow: auto;
        }
    `]
            },] },
];
/** @nocollapse */
EditorComponent.ctorParameters = () => [
    { type: DialogService },
    { type: LocalizationService },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
EditorComponent.propDecorators = {
    value: [{ type: Input }],
    iframe: [{ type: Input }],
    updateInterval: [{ type: Input }],
    valueChange: [{ type: Output }],
    hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-editor',] }],
    isIE: [{ type: HostBinding, args: ['class.k-ie',] }],
    dir: [{ type: HostBinding, args: ['attr.dir',] }],
    userToolBarComponent: [{ type: ContentChild, args: [ToolBarComponent,] }],
    userToolBarElement: [{ type: ContentChild, args: [ToolBarComponent, { read: ElementRef },] }],
    dialogContainer: [{ type: ViewChild, args: ['dialogsContainer', { read: ViewContainerRef },] }],
    container: [{ type: ViewChild, args: ['content', { read: ViewContainerRef },] }],
    defaultToolbar: [{ type: ViewChild, args: ['defaultToolbar', { read: ElementRef },] }],
    defaultToolbarComponent: [{ type: ViewChild, args: ['defaultToolbar', { read: ToolBarComponent },] }]
};

/**
 * @hidden
 */
class FormatDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = [];
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec('format', { tag: this.value });
        }
        this.dialog.close();
    }
    setData(args) {
        this.editor = args.editor;
        this.data = args.data;
        this.defaultItem = args.defaultItem;
        this.value = args.value;
        this.itemDisabled = args.itemDisabled;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
FormatDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            {{ textFor('format') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-format-dropdownlist
                        #formatDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-format-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
FormatDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
FormatDialogComponent.propDecorators = {
    editor: [{ type: Input }]
};

/**
 * @hidden
 */
class ColorPickerDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
    }
    handleActiveColorClick(event) {
        event.preventOpen();
        this.value = event.color;
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec(this.editorCommand, this.value);
        }
        this.dialog.close();
    }
    setData(args) {
        this.editor = args.editor;
        this.value = args.value;
        this.editorCommand = args.editorCommand;
        this.paletteSettings = args.paletteSettings;
        this.icon = args.icon;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
ColorPickerDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            {{ textFor('format') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-colorpicker
                        #colorpicker
                        [view]="'palette'"
                        [format]="'hex'"
                        [attr.title]="title"
                        [icon]="icon"
                        [(value)]="value"
                        [paletteSettings]="paletteSettings"
                        (activeColorClick)="handleActiveColorClick($event)"
                    >
                    </kendo-colorpicker>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
ColorPickerDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
ColorPickerDialogComponent.propDecorators = {
    editor: [{ type: Input }]
};

/**
 * @hidden
 */
class FontFamilyDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = [];
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec('fontFamily', this.value);
        }
        this.dialog.close();
    }
    setData(args) {
        this.editor = args.editor;
        this.data = args.data;
        this.defaultItem = args.defaultItem;
        this.value = args.value;
        this.itemDisabled = args.itemDisabled;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
FontFamilyDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            {{ textFor('fontFamily') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-fontfamily-dropdownlist
                        #fontFamilyDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-fontfamily-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
FontFamilyDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
FontFamilyDialogComponent.propDecorators = {
    editor: [{ type: Input }]
};

/**
 * @hidden
 */
class InsertTableDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
    }
    onCancelAction() {
        this.dialog.close();
    }
    onCellClick(args) {
        this.dialog.close();
        this.editor.exec("insertTable", args);
    }
    setData(args) {
        this.editor = args.editor;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
InsertTableDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            {{ textFor('insertTable') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-ct-popup k-window-content" style="text-align: center;">
                    <kendo-popup-table-grid (cellClick)="onCellClick($event)"></kendo-popup-table-grid>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
InsertTableDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
InsertTableDialogComponent.propDecorators = {
    editor: [{ type: Input }]
};

/**
 * @hidden
 */
class FormatDropDownListComponent {
    constructor() {
        this.valueChange = new EventEmitter();
    }
    onValueChange(tag) {
        this.valueChange.emit(tag);
    }
}
FormatDropDownListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                selector: 'kendo-editor-format-dropdownlist',
                template: `
        <kendo-dropdownlist
            #element
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'tag'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            (valueChange)="onValueChange($event)"
        >
            <ng-template kendoDropDownListItemTemplate let-dataItem>
                <ng-container [ngSwitch]="dataItem.tag">
                    <span *ngSwitchCase="'h1'" style="display: block; font-size: 2em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h2'" style="display: block; font-size: 1.5em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h3'" style="display: block; font-size: 1.17em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h4'" style="display: block; font-size: 1em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h5'" style="display: block; font-size: .83em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'h6'" style="display: block; font-size: .67em; margin-left: 0; font-weight: bold;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'p'" style="display: block; margin-left: 0;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchCase="'blockquote'" style="display: block; margin-left: 0;">
                        {{ dataItem.text }}
                    </span>

                    <span *ngSwitchDefault>{{ dataItem.text }}</span>
                </ng-container>
            </ng-template>
        </kendo-dropdownlist>
    `
            },] },
];
FormatDropDownListComponent.propDecorators = {
    data: [{ type: Input }],
    value: [{ type: Input }],
    defaultItem: [{ type: Input }],
    itemDisabled: [{ type: Input }],
    title: [{ type: Input }],
    valueChange: [{ type: Output }],
    element: [{ type: ViewChild, args: ['element',] }]
};

/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-dropdownlist` with an Editor command that changes the format of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFormat></kendo-toolbar-dropdownlist>
 * ```
 */
class EditorFormatComponent extends ToolBarToolComponent {
    constructor(editor, dialogService, localization) {
        super();
        this.editor = editor;
        this.dialogService = dialogService;
        this.localization = localization;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
        this._data = [
            { text: 'Paragraph', tag: 'p' },
            { text: 'Quotation', tag: 'blockquote' },
            { text: 'Heading 1', tag: 'h1' },
            { text: 'Heading 2', tag: 'h2' },
            { text: 'Heading 3', tag: 'h3' },
            { text: 'Heading 4', tag: 'h4' },
            { text: 'Heading 5', tag: 'h5' },
            { text: 'Heading 6', tag: 'h6' }
        ];
    }
    /**
     * Overrides the default format items list.
     */
    set data(formatItems) {
        this._data = formatItems || this._data;
    }
    get data() {
        return this._data;
    }
    ngOnInit() {
        this.itemDisabled = (itemArgs) => {
            return itemArgs.dataItem.tag === null;
        };
        setTimeout(() => (this.defaultItem = { text: this.title, tag: null }));
        this.subs = this.editor.stateChange.subscribe(({ format }) => {
            const index = this.data.findIndex(item => item.tag === format.tag);
            this.value = index !== -1 ? format.tag : null;
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('format', { tag: ev });
            this.editor.focus();
            this.valueChange.emit(this.data.find(d => d.tag === ev));
        }
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    get outerWidth() {
        const element = this.formatDropDownList.element;
        if (element) {
            return outerWidth(element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('format');
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: FormatDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            data: this.data,
            defaultItem: this.defaultItem,
            value: this.value,
            itemDisabled: this.itemDisabled
        });
    }
}
EditorFormatComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFormatComponent) }],
                selector: 'kendo-toolbar-dropdownlist[kendoEditorFormat]',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-format-dropdownlist
                #formatDropDownList
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-format-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                class="k-overflow-button"
                [icon]="'apply-format'"
                [attr.title]="title"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
EditorFormatComponent.ctorParameters = () => [
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: DialogService },
    { type: EditorLocalizationService }
];
EditorFormatComponent.propDecorators = {
    data: [{ type: Input }],
    valueChange: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate',] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    formatDropDownList: [{ type: ViewChild, args: ['formatDropDownList',] }]
};

/**
 * @hidden
 */
class FontSizeDialogComponent extends DialogContentBase {
    constructor(dialog, localization) {
        super(dialog);
        this.dialog = dialog;
        this.localization = localization;
        this.data = [];
    }
    onCancelAction() {
        this.dialog.close();
    }
    onConfirmAction() {
        if (this.value) {
            this.editor.exec('fontSize', this.value);
        }
        this.dialog.close();
    }
    setData(args) {
        this.editor = args.editor;
        this.data = args.data;
        this.defaultItem = args.defaultItem;
        this.value = args.value;
        this.itemDisabled = args.itemDisabled;
    }
    textFor(key) {
        return this.localization.get(key);
    }
}
FontSizeDialogComponent.decorators = [
    { type: Component, args: [{
                template: `
        <kendo-dialog-titlebar>
            {{ textFor('fontSize') }}
        </kendo-dialog-titlebar>
        <div class="k-editor-dialog">
            <div class="k-editor-dialog k-popup-edit-form k-window-content k-content">
                <div class="k-edit-form-container k-window-content" style="text-align: center;">
                    <kendo-editor-fontsize-dropdownlist
                        #fontSizeDropDownList
                        [defaultItem]="defaultItem"
                        [data]="data"
                        [(value)]="value"
                        [itemDisabled]="itemDisabled"
                    >
                    </kendo-editor-fontsize-dropdownlist>
                </div>
            </div>
        </div>
        <kendo-dialog-actions>
            <button kendoButton (click)="onCancelAction()">{{ textFor('dialogCancel') }}</button>
            <button kendoButton
                    (click)="onConfirmAction()" [primary]="true">{{ textFor('dialogApply') }}</button>
        </kendo-dialog-actions>
    `
            },] },
];
/** @nocollapse */
FontSizeDialogComponent.ctorParameters = () => [
    { type: DialogRef },
    { type: EditorLocalizationService }
];
FontSizeDialogComponent.propDecorators = {
    editor: [{ type: Input }]
};

/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-dropdownlist` with an Editor command that changes the font size of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFontSize></kendo-toolbar-dropdownlist>
 * ```
 */
class EditorFontSizeComponent extends ToolBarToolComponent {
    constructor(editor, dialogService, localization) {
        super();
        this.editor = editor;
        this.dialogService = dialogService;
        this.localization = localization;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
        this._data = [
            { text: '8px', size: 8 },
            { text: '10px', size: 10 },
            { text: '12px', size: 12 },
            { text: '14px', size: 14 },
            { text: '18px', size: 18 },
            { text: '24px', size: 24 },
            { text: '36px', size: 36 }
        ];
    }
    /**
     * Overrides the default font size list.
     */
    set data(sizes) {
        this._data = sizes || this._data;
    }
    get data() {
        return this._data;
    }
    ngOnInit() {
        this.itemDisabled = itemArgs => {
            return itemArgs.dataItem.size === null;
        };
        setTimeout(() => (this.defaultItem = { text: this.title, size: null }));
        this.subs = this.editor.stateChange.subscribe(({ style }) => {
            // remove units(px, em, rem...)
            // string#match returns array
            this.value = (getUniqueStyleValues(style, 'font-size').match(/\d+/g) || [null])[0];
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('fontSize', ev);
            this.editor.focus();
            this.valueChange.emit(this.data.find(d => d.size === parseInt(ev, 10)));
        }
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('fontSize');
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: FontSizeDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            data: this.data,
            defaultItem: this.defaultItem,
            value: this.value,
            itemDisabled: this.itemDisabled
        });
    }
}
EditorFontSizeComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFontSizeComponent) }],
                selector: 'kendo-toolbar-dropdownlist[kendoEditorFontSize]',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-fontsize-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-fontsize-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                class="k-overflow-button"
                [icon]="'font-size'"
                [attr.title]="title"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
EditorFontSizeComponent.ctorParameters = () => [
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: DialogService },
    { type: EditorLocalizationService }
];
EditorFontSizeComponent.propDecorators = {
    data: [{ type: Input }],
    valueChange: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate',] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    element: [{ type: ViewChild, args: ['element',] }]
};

/**
 * A component which configures an existing `DropDownListComponent` as an Editor tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The component associates a `kendo-toolbar-dropdownlist` with an Editor command that changes the font family of a content block and
 * automatically defines the options of the drop-down list and sets its values.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-dropdownlist kendoEditorFontFamily></kendo-toolbar-dropdownlist>
 * ```
 */
class EditorFontFamilyComponent extends ToolBarToolComponent {
    constructor(editor, dialogService, localization) {
        super();
        this.editor = editor;
        this.dialogService = dialogService;
        this.localization = localization;
        /**
         * Fires when the user updates the value of the drop-down list.
         */
        this.valueChange = new EventEmitter();
        this._data = [
            { text: 'Arial', fontName: 'Arial,"Helvetica Neue",Helvetica,sans-serif' },
            { text: 'Courier New', fontName: '"Courier New",Courier,"Lucida Sans Typewriter","Lucida Typewriter",monospace' },
            { text: 'Georgia', fontName: 'Georgia,Times,"Times New Roman",serif' },
            {
                fontName: 
                // tslint:disable-next-line:max-line-length
                'Impact,Haettenschweiler,"Franklin Gothic Bold",Charcoal,"Helvetica Inserat","Bitstream Vera Sans Bold","Arial Black","sans serif"',
                text: 'Impact'
            },
            { text: 'Lucida Console', fontName: '"Lucida Console","Lucida Sans Typewriter",monaco,"Bitstream Vera Sans Mono",monospace' },
            { text: 'Tahoma', fontName: 'Tahoma,Verdana,Segoe,sans-serif' },
            { text: 'Times New Roman', fontName: 'TimesNewRoman,"Times New Roman",Times,Baskerville,Georgia,serif' },
            { text: 'Trebuchet MS', fontName: '"Trebuchet MS","Lucida Grande","Lucida Sans Unicode","Lucida Sans",Tahoma,sans-serif' },
            { text: 'Verdana', fontName: 'Verdana,Geneva,sans-serif' }
        ];
    }
    /**
     * Overrides the default font list.
     */
    set data(fonts) {
        this._data = fonts || this._data;
    }
    get data() {
        return this._data;
    }
    ngOnInit() {
        this.itemDisabled = (itemArgs) => {
            return itemArgs.dataItem.fontName === null;
        };
        setTimeout(() => (this.defaultItem = { text: this.title, fontName: null }));
        this.subs = this.editor.stateChange.subscribe(({ style }) => {
            this.value = getUniqueStyleValues(style, 'font-family') || null;
        });
    }
    /**
     * @hidden
     */
    onValueChange(ev) {
        if (isPresent(ev)) {
            this.editor.exec('fontFamily', ev);
            this.editor.focus();
            this.valueChange.emit(this.data.find(f => f.fontName === ev));
        }
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('fontFamily');
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: FontFamilyDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            data: this.data,
            defaultItem: this.defaultItem,
            value: this.value,
            itemDisabled: this.itemDisabled
        });
    }
}
EditorFontFamilyComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorFontFamilyComponent) }],
                selector: 'kendo-toolbar-dropdownlist[kendoEditorFontFamily]',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-editor-fontfamily-dropdownlist
                #element
                [defaultItem]="defaultItem"
                [data]="data"
                [(value)]="value"
                [itemDisabled]="itemDisabled"
                [title]="title"
                (valueChange)="onValueChange($event)"
            >
            </kendo-editor-fontfamily-dropdownlist>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                class="k-overflow-button"
                [icon]="'font-family'"
                [attr.title]="title"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
EditorFontFamilyComponent.ctorParameters = () => [
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: DialogService },
    { type: EditorLocalizationService }
];
EditorFontFamilyComponent.propDecorators = {
    data: [{ type: Input }],
    valueChange: [{ type: Output }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate',] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    element: [{ type: ViewChild, args: ['element',] }]
};

// tslint:disable:no-forward-ref
/**
 * A component which configures an existing ColorPickerComponent as a ToolBar tool.
 * To associate a `kendo-toolbar-colorpicker` with an Editor command that changes the
 * foreground or the background color of the text, use the `kendoEditorForeColor` or `kendoEditorBackColor` directive.
 */
class EditorColorPickerComponent extends ToolBarToolComponent {
    constructor(editor, localization, dialogService) {
        super();
        this.editor = editor;
        this.localization = localization;
        this.dialogService = dialogService;
    }
    /**
     * @hidden
     */
    get title() {
        return this.localization.get(this.editorCommand);
    }
    /**
     * @hidden
     */
    handleValueChange(color) {
        this.editor.exec(this.editorCommand, color);
        this.editor.focus();
    }
    /**
     * @hidden
     */
    handleActiveColorClick(event) {
        event.preventOpen();
        this.handleValueChange(event.color);
    }
    /**
     * @hidden
     */
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: ColorPickerDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor,
            value: this.value,
            title: this.title,
            editorCommand: this.editorCommand,
            paletteSettings: this.paletteSettings,
            icon: this.icon
        });
    }
}
EditorColorPickerComponent.decorators = [
    { type: Component, args: [{
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorColorPickerComponent) }],
                selector: 'kendo-toolbar-colorpicker',
                template: `
        <ng-template #toolbarTemplate>
            <kendo-colorpicker
                #colorpicker
                [view]="'palette'"
                [format]="'hex'"
                [attr.title]="title"
                [icon]="icon"
                [value]="value"
                [paletteSettings]="paletteSettings"
                (valueChange)="handleValueChange($event)"
                (activeColorClick)="handleActiveColorClick($event)"
            >
            </kendo-colorpicker>
        </ng-template>
        <ng-template #popupTemplate>
            <button
                tabindex="-1"
                type="button"
                kendoButton
                class="k-overflow-button"
                [icon]="icon"
                [attr.title]="title"
                (click)="openDialog()"
            >
                {{ title }}
            </button>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
EditorColorPickerComponent.ctorParameters = () => [
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService },
    { type: DialogService }
];
EditorColorPickerComponent.propDecorators = {
    value: [{ type: Input }],
    icon: [{ type: Input }],
    paletteSettings: [{ type: Input }],
    editorCommand: [{ type: Input }],
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate',] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    element: [{ type: ViewChild, args: ['colorpicker', { read: ElementRef },] }]
};

const popupWrapperWidth = '190px';
const popupWrapperHeight = '164px'; // Set to '192px' when TableWizard button is added;
/**
 * A toolbar component which allows the user to create and insert a table in the Editor's content.
 *
 * @example
 * ```ts-no-run
 * <kendo-editor-insert-table-button></kendo-editor-insert-table-button>
 * ```
 */
class EditorInsertTableButtonComponent extends ToolBarToolComponent {
    constructor(editor, localization, popupService, dialogService) {
        super();
        this.editor = editor;
        this.localization = localization;
        this.popupService = popupService;
        this.dialogService = dialogService;
        this.open = false;
        this.buttonBlurred = new EventEmitter();
        this.cellClicked = new EventEmitter();
        this.subs = this.editor.stateChange.subscribe(({ insertTable }) => {
            this.disabled = insertTable;
        });
        this.subs = this.buttonBlurred.pipe(concatMap(() => interval(200).pipe(take(1), takeUntil(this.cellClicked))))
            .subscribe(() => {
            this.toggle(false);
        });
    }
    ngOnDestroy() {
        this.destroyPopup();
        this.subs.unsubscribe();
    }
    get outerWidth() {
        if (this.element) {
            return outerWidth(this.element.nativeElement);
        }
    }
    get title() {
        return this.localization.get('insertTable');
    }
    /**
     * @hidden
     */
    toggle(open) {
        this.open = (open === undefined) ? !this.open : open;
        this.destroyPopup();
        if (this.open) {
            this.createPopup();
        }
    }
    /**
     * @hidden
     */
    openDialog() {
        const dialogSettings = {
            appendTo: this.editor.dialogContainer,
            content: InsertTableDialogComponent
        };
        this.editor.toolbar.toggle(false);
        const dialogContent = this.dialogService.open(dialogSettings).content.instance;
        dialogContent.setData({
            editor: this.editor
        });
    }
    /**
     * @hidden
     */
    onBlur() {
        this.buttonBlurred.emit();
    }
    /**
     * @hidden
     */
    onCellClick(args) {
        this.cellClicked.emit();
        this.toggle(false);
        this.editor.exec("insertTable", args);
    }
    /**
     * @hidden
     */
    onTableWizardClick() {
        // this.toggle(false);
        // this.editor.openDialog("tableWizard");
    }
    createPopup() {
        const horizontalAlign = this.editor.direction === "rtl" ? "right" : "left";
        const anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        const popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.element,
            anchorAlign: anchorPosition,
            animate: true,
            content: this.popupGridTemplate,
            popupAlign: popupPosition,
            popupClass: 'k-ct-popup k-group k-reset k-state-border-up',
            positionMode: 'absolute'
        });
        const popupWrapper = this.popupRef.popupElement;
        popupWrapper.style.width = popupWrapperWidth;
        popupWrapper.style.height = popupWrapperHeight;
        popupWrapper.setAttribute("dir", this.editor.direction);
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
    }
}
EditorInsertTableButtonComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                providers: [{ provide: ToolBarToolComponent, useExisting: forwardRef(() => EditorInsertTableButtonComponent) }],
                selector: 'kendo-editor-insert-table-button',
                template: `
        <ng-template #toolbarTemplate>
            <button type="button" kendoButton #element [attr.title]="title" [icon]="'table-insert'" [disabled]="disabled" (click)="toggle()" (blur)="onBlur()"></button>
        </ng-template>
        <ng-template #popupTemplate>
            <button kendoButton [attr.title]="title" [icon]="'table-insert'" [disabled]="disabled" (click)="openDialog()">{{ title }}</button>
        </ng-template>
        <ng-template #popupGridTemplate>
            <kendo-popup-table-grid (cellClick)="onCellClick($event)" (tableWizardClick)="onTableWizardClick()"></kendo-popup-table-grid>
        </ng-template>
    `
            },] },
];
/** @nocollapse */
EditorInsertTableButtonComponent.ctorParameters = () => [
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService },
    { type: PopupService },
    { type: DialogService }
];
EditorInsertTableButtonComponent.propDecorators = {
    toolbarTemplate: [{ type: ViewChild, args: ['toolbarTemplate',] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    element: [{ type: ViewChild, args: ['element',] }],
    popupGridTemplate: [{ type: ViewChild, args: ['popupGridTemplate',] }]
};

/**
 * @hidden
 */
class PopupTableGridComponent {
    constructor() {
        this.cellClick = new EventEmitter();
        this.tableWizardClick = new EventEmitter();
        this.state = { rows: -1, cols: -1 };
        this.rows = 6;
        this.cols = 8;
    }
    get message() {
        const { rows, cols } = this.state;
        return `Create a ${rows > -1 ? rows + 1 : ''} ${cols > -1 ? 'x' : ''} ${cols > -1 ? cols + 1 : ''} table`;
    }
    get cells() {
        return Array.from(Array(this.rows * this.cols).keys());
    }
    selected(index) {
        const { rows, cols } = this.state;
        const cellRow = Math.floor(index / this.cols);
        const cellCol = index % this.cols;
        return cellRow <= rows && cellCol <= cols;
    }
    setState(index) {
        const rows = Math.floor(index / this.cols);
        const cols = index % this.cols;
        this.state = { rows: rows, cols: cols };
    }
    resetState() {
        this.state = { rows: -1, cols: -1 };
    }
    insertTable() {
        this.cellClick.emit(this.state);
    }
    openTableWizard() {
        this.tableWizardClick.emit();
    }
}
PopupTableGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-popup-table-grid',
                template: `
        <div style="border-color: inherit;" (mouseleave)="resetState()" (click)="insertTable()">
            <span *ngFor="let i of cells"
                class="k-ct-cell"
                [class.k-state-selected]="selected(i)"
                [class.k-state-disabled]="!selected(i)"
                (mouseenter)="setState(i)">
            </span>
        </div>
        <div class="k-status" unselectable="on">{{ message }}</div>
        <!-- uncomment when TableWizard is completed
        <div class="k-editor-toolbar" unselectable="on">
            <button type="button" kendoButton class="k-tool" [icon]="'table-wizard'" (click)="openTableWizard()" title="Table Wizard">Table Wizard</button>
        </div>
        -->
    `
            },] },
];
PopupTableGridComponent.propDecorators = {
    cellClick: [{ type: Output }],
    tableWizardClick: [{ type: Output }]
};

/**
 * @hidden
 */
const commandIcons = {
    alignCenter: 'align-center',
    alignJustify: 'align-justify',
    alignLeft: 'align-left',
    alignRight: 'align-right',
    bold: 'bold',
    cleanFormatting: 'clear-css',
    createLink: 'link-horizontal',
    indent: 'indent-increase',
    insertFile: 'file-add',
    insertImage: 'image',
    insertOrderedList: 'list-ordered',
    insertUnorderedList: 'list-unordered',
    italic: 'italic',
    outdent: 'indent-decrease',
    redo: 'redo',
    strikethrough: 'strikethrough',
    subscript: 'sub-script',
    superscript: 'sup-script',
    underline: 'underline',
    undo: 'undo',
    unlink: 'unlink-horizontal',
    viewSource: 'html',
    foreColor: 'foreground-color',
    backColor: 'background',
    //table
    insertTable: 'table-insert',
    addColumnBefore: 'table-column-insert-left',
    addColumnAfter: 'table-column-insert-right',
    addRowBefore: 'table-row-insert-above',
    addRowAfter: 'table-row-insert-below',
    deleteRow: 'table-row-delete',
    deleteColumn: 'table-column-delete',
    mergeCells: 'cells-merge',
    splitCell: 'cell-split-horizontally',
    deleteTable: 'table-delete'
    // tableWizard: 'table-wizard'
};

/**
 * @hidden
 */
class EditorCommandBase {
    constructor(command, button, editor, localization) {
        this.command = command;
        this.button = button;
        this.editor = editor;
        this.localization = localization;
    }
    ngOnInit() {
        this.subs = this.editor.stateChange.subscribe(this.onStateChange.bind(this));
        this.subs.add(this.button.click.subscribe((this.clickHandler.bind(this))));
        Promise.resolve(null).then(() => {
            const text = this.localization.get(this.command);
            if (text) {
                this.button.showText = "overflow";
                this.button.showIcon = "both";
                this.button.text = text;
            }
            if (!this.button.icon) {
                this.button.icon = commandIcons[this.command];
            }
            this.button.title = text;
        });
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    // tslint:disable-next-line
    clickHandler() { }
    // tslint:disable-next-line
    onStateChange(_toolBarState) { }
}

/**
 * @hidden
 */
class EditorCommandButton extends EditorCommandBase {
    constructor(command, button, editor, localization) {
        super(command, button, editor, localization);
        this.command = command;
        this.button = button;
        this.editor = editor;
        this.localization = localization;
    }
    clickHandler() {
        this.editor.exec(this.command);
        this.editor.focus();
    }
    onStateChange(toolBarState) {
        this.button.selected = toolBarState[this.command];
    }
}

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignLeft tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignLeftButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignLeftButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorAlignLeftButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('alignLeft', button, editor, localization);
    }
}
EditorAlignLeftButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAlignLeftButton]'
            },] },
];
/** @nocollapse */
EditorAlignLeftButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignCenter tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignCenterButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignCenterButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorAlignCenterButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('alignCenter', button, editor, localization);
    }
}
EditorAlignCenterButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAlignCenterButton]'
            },] },
];
/** @nocollapse */
EditorAlignCenterButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignRight tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignRightButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignRightButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorAlignRightButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('alignRight', button, editor, localization);
    }
}
EditorAlignRightButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAlignRightButton]'
            },] },
];
/** @nocollapse */
EditorAlignRightButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AlignJustify tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignJustifyButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAlignJustifyButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorAlignJustifyButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('alignJustify', button, editor, localization);
    }
}
EditorAlignJustifyButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAlignJustifyButton]'
            },] },
];
/** @nocollapse */
EditorAlignJustifyButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Redo tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorRedoButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorRedoButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorRedoButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('redo', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line:typedef
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState[this.command];
    }
}
EditorRedoButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorRedoButton]'
            },] },
];
/** @nocollapse */
EditorRedoButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Undo tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUndoButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUndoButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorUndoButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('undo', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line:typedef
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState[this.command];
    }
}
EditorUndoButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorUndoButton]'
            },] },
];
/** @nocollapse */
EditorUndoButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * @hidden
 */
class EditorCommandDialog extends EditorCommandBase {
    constructor(dialog, button, editor, localization) {
        super(dialog, button, editor, localization);
        this.dialog = dialog;
        this.button = button;
        this.editor = editor;
        this.localization = localization;
    }
    clickHandler() {
        this.editor.openDialog(this.dialog);
    }
}

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor InsertImage tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertImageButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertImageButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorInsertImageButtonDirective extends EditorCommandDialog {
    constructor(button, editor, localization) {
        super('insertImage', button, editor, localization);
    }
}
EditorInsertImageButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorInsertImageButton]'
            },] },
];
/** @nocollapse */
EditorInsertImageButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Indent tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorIndentButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorIndentButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorIndentButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('indent', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line:typedef
    onStateChange(toolBarState) {
        this.button.disabled = !toolBarState[this.command];
    }
}
EditorIndentButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorIndentButton]'
            },] },
];
/** @nocollapse */
EditorIndentButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Outdent tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorOutdentButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorOutdentButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorOutdentButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('outdent', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line:typedef
    onStateChange(toolBarState) {
        this.button.disabled = !toolBarState[this.command];
    }
}
EditorOutdentButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorOutdentButton]'
            },] },
];
/** @nocollapse */
EditorOutdentButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor CreateLink tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCreateLinkButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCreateLinkButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorCreateLinkButtonDirective extends EditorCommandDialog {
    constructor(button, editor, localization) {
        super('createLink', button, editor, localization);
    }
}
EditorCreateLinkButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorCreateLinkButton]'
            },] },
];
/** @nocollapse */
EditorCreateLinkButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Unlink tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnlinkButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnlinkButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorUnlinkButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('unlink', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line:typedef
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.unlink;
    }
}
EditorUnlinkButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorUnlinkButton]'
            },] },
];
/** @nocollapse */
EditorUnlinkButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor InsertOrderedList tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertOrderedListButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertOrderedListButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorInsertOrderedListButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('insertOrderedList', button, editor, localization);
    }
}
EditorInsertOrderedListButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorInsertOrderedListButton]'
            },] },
];
/** @nocollapse */
EditorInsertOrderedListButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor InsertUnorderedList tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertUnorderedListButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertUnorderedListButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorInsertUnorderedListButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('insertUnorderedList', button, editor, localization);
    }
}
EditorInsertUnorderedListButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorInsertUnorderedListButton]'
            },] },
];
/** @nocollapse */
EditorInsertUnorderedListButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor ViewSource tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorViewSourceButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorViewSourceButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorViewSourceButtonDirective extends EditorCommandDialog {
    constructor(button, editor, localization) {
        super('viewSource', button, editor, localization);
    }
}
EditorViewSourceButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorViewSourceButton]'
            },] },
];
/** @nocollapse */
EditorViewSourceButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Bold tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorBoldButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorBoldButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorBoldButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('bold', button, editor, localization);
    }
}
EditorBoldButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorBoldButton]'
            },] },
];
/** @nocollapse */
EditorBoldButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Italic tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorItalicButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorItalicButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorItalicButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('italic', button, editor, localization);
    }
}
EditorItalicButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorItalicButton]'
            },] },
];
/** @nocollapse */
EditorItalicButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Underline tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnderlineButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorUnderlineButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorUnderlineButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('underline', button, editor, localization);
    }
}
EditorUnderlineButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorUnderlineButton]'
            },] },
];
/** @nocollapse */
EditorUnderlineButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Strikethrough tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorStrikethroughButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorStrikethroughButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorStrikethroughButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('strikethrough', button, editor, localization);
    }
}
EditorStrikethroughButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorStrikethroughButton]'
            },] },
];
/** @nocollapse */
EditorStrikethroughButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Subscript tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSubscriptButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSubscriptButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorSubscriptButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('subscript', button, editor, localization);
    }
}
EditorSubscriptButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorSubscriptButton]'
            },] },
];
/** @nocollapse */
EditorSubscriptButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Superscript tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `selected` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSuperscriptButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon that is applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSuperscriptButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorSuperscriptButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('superscript', button, editor, localization);
    }
}
EditorSuperscriptButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorSuperscriptButton]'
            },] },
];
/** @nocollapse */
EditorSuperscriptButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor 'Insert File' tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorInsertFileButton></kendo-toolbar-button>
 * ```
 */
class EditorInsertFileButtonDirective extends EditorCommandDialog {
    constructor(button, editor, localization) {
        super('insertFile', button, editor, localization);
    }
}
EditorInsertFileButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorInsertFileButton]'
            },] },
];
/** @nocollapse */
EditorInsertFileButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an `EditorColorPickerComponent`
 * for manipulating the foreground color of the text
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 */
class EditorForeColorDirective {
    constructor(colorPicker) {
        this.colorPicker = colorPicker;
        this.colorPicker.icon = commandIcons.foreColor;
        this.colorPicker.editorCommand = 'foreColor';
    }
}
EditorForeColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoEditorForeColor]'
            },] },
];
/** @nocollapse */
EditorForeColorDirective.ctorParameters = () => [
    { type: EditorColorPickerComponent }
];

/**
 * A directive which configures an `EditorColorPickerComponent`
 * for manipulating the background color of the text
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 */
class EditorBackColorDirective {
    constructor(colorPicker) {
        this.colorPicker = colorPicker;
        this.colorPicker.icon = commandIcons.backColor;
        this.colorPicker.editorCommand = 'backColor';
    }
}
EditorBackColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoEditorBackColor]'
            },] },
];
/** @nocollapse */
EditorBackColorDirective.ctorParameters = () => [
    { type: EditorColorPickerComponent }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor Clean Formatting tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCleanFormattingButton></kendo-toolbar-button>
 * ```
 *
 * The following example demonstrates how to change the default icon applied by the directive.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorCleanFormattingButton [icon]="'blogger'"></kendo-toolbar-button>
 * ```
 */
class EditorCleanFormattingButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('cleanFormatting', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.cleanFormatting;
    }
}
EditorCleanFormattingButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorCleanFormattingButton]'
            },] },
];
/** @nocollapse */
EditorCleanFormattingButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddColumnBefore tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddColumnBeforeButton></kendo-toolbar-button>
 * ```
 */
class EditorAddColumnBeforeButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('addColumnBefore', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.addColumnBefore;
    }
}
EditorAddColumnBeforeButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAddColumnBeforeButton]'
            },] },
];
/** @nocollapse */
EditorAddColumnBeforeButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddColumnAfter tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddColumnAfterButton></kendo-toolbar-button>
 * ```
 */
class EditorAddColumnAfterButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('addColumnAfter', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.addColumnAfter;
    }
}
EditorAddColumnAfterButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAddColumnAfterButton]'
            },] },
];
/** @nocollapse */
EditorAddColumnAfterButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddRowBefore tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddRowBeforeButton></kendo-toolbar-button>
 * ```
 */
class EditorAddRowBeforeButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('addRowBefore', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.addRowBefore;
    }
}
EditorAddRowBeforeButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAddRowBeforeButton]'
            },] },
];
/** @nocollapse */
EditorAddRowBeforeButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor AddRowAfter tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorAddRowAfterButton></kendo-toolbar-button>
 * ```
 */
class EditorAddRowAfterButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('addRowAfter', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.addRowAfter;
    }
}
EditorAddRowAfterButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorAddRowAfterButton]'
            },] },
];
/** @nocollapse */
EditorAddRowAfterButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor DeleteColumn tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDeleteColumnButton></kendo-toolbar-button>
 * ```
 */
class EditorDeleteColumnButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('deleteColumn', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.deleteColumn;
    }
}
EditorDeleteColumnButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorDeleteColumnButton]'
            },] },
];
/** @nocollapse */
EditorDeleteColumnButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor DeleteRow tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDeleteRowButton></kendo-toolbar-button>
 * ```
 */
class EditorDeleteRowButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('deleteRow', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.deleteRow;
    }
}
EditorDeleteRowButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorDeleteRowButton]'
            },] },
];
/** @nocollapse */
EditorDeleteRowButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor DeleteTable tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorDeleteTableButton></kendo-toolbar-button>
 * ```
 */
class EditorDeleteTableButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('deleteTable', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.deleteTable;
    }
}
EditorDeleteTableButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorDeleteTableButton]'
            },] },
];
/** @nocollapse */
EditorDeleteTableButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * @hidden
 *
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor MergeCells tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorMergeCellsButton></kendo-toolbar-button>
 * ```
 */
class EditorMergeCellsButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('mergeCells', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.mergeCells;
    }
}
EditorMergeCellsButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorMergeCellsButton]'
            },] },
];
/** @nocollapse */
EditorMergeCellsButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * @hidden
 *
 * A directive which configures an existing `ToolBarButtonComponent` as an Editor SplitCell tool
 * ([see example]({% slug toolbartools_editor %}#toc-built-in-tools)).
 * The directive will predefine the `icon` and `click` event handlers of the button.
 * In addition, the directive updates the `disabled` state of the button according to the cursor position in the editing area.
 *
 * @example
 * ```ts-no-run
 * <kendo-toolbar-button kendoEditorSplitCellButton></kendo-toolbar-button>
 * ```
 */
class EditorSplitCellButtonDirective extends EditorCommandButton {
    constructor(button, editor, localization) {
        super('splitCell', button, editor, localization);
    }
    /**
     * @hidden
     */
    // tslint:disable-next-line
    onStateChange(toolBarState) {
        this.button.disabled = toolBarState.splitCell;
    }
}
EditorSplitCellButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'kendo-toolbar-button[kendoEditorSplitCellButton]'
            },] },
];
/** @nocollapse */
EditorSplitCellButtonDirective.ctorParameters = () => [
    { type: ToolBarButtonComponent },
    { type: EditorComponent, decorators: [{ type: Host }] },
    { type: EditorLocalizationService }
];

/**
 * @hidden
 */
class Messages extends ComponentMessages {
}
Messages.propDecorators = {
    alignCenter: [{ type: Input }],
    alignJustify: [{ type: Input }],
    alignLeft: [{ type: Input }],
    alignRight: [{ type: Input }],
    backColor: [{ type: Input }],
    bold: [{ type: Input }],
    cleanFormatting: [{ type: Input }],
    createLink: [{ type: Input }],
    fontFamily: [{ type: Input }],
    fontSize: [{ type: Input }],
    foreColor: [{ type: Input }],
    format: [{ type: Input }],
    indent: [{ type: Input }],
    insertFile: [{ type: Input }],
    insertImage: [{ type: Input }],
    insertOrderedList: [{ type: Input }],
    insertUnorderedList: [{ type: Input }],
    italic: [{ type: Input }],
    outdent: [{ type: Input }],
    redo: [{ type: Input }],
    strikethrough: [{ type: Input }],
    subscript: [{ type: Input }],
    superscript: [{ type: Input }],
    underline: [{ type: Input }],
    undo: [{ type: Input }],
    unlink: [{ type: Input }],
    viewSource: [{ type: Input }],
    insertTable: [{ type: Input }],
    addColumnBefore: [{ type: Input }],
    addColumnAfter: [{ type: Input }],
    addRowBefore: [{ type: Input }],
    addRowAfter: [{ type: Input }],
    deleteColumn: [{ type: Input }],
    deleteRow: [{ type: Input }],
    deleteTable: [{ type: Input }],
    dialogApply: [{ type: Input }],
    dialogCancel: [{ type: Input }],
    dialogInsert: [{ type: Input }],
    dialogUpdate: [{ type: Input }],
    fileText: [{ type: Input }],
    fileTitle: [{ type: Input }],
    fileWebAddress: [{ type: Input }],
    imageAltText: [{ type: Input }],
    imageHeight: [{ type: Input }],
    imageWebAddress: [{ type: Input }],
    imageWidth: [{ type: Input }],
    linkOpenInNewWindow: [{ type: Input }],
    linkText: [{ type: Input }],
    linkTitle: [{ type: Input }],
    linkWebAddress: [{ type: Input }]
};

/**
 * @hidden
 */
class LocalizedMessagesDirective extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
}
LocalizedMessagesDirective.decorators = [
    { type: Directive, args: [{
                providers: [
                    {
                        provide: Messages,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => LocalizedMessagesDirective)
                    }
                ],
                selector: '[kendoEditorLocalizedMessages]'
            },] },
];
/** @nocollapse */
LocalizedMessagesDirective.ctorParameters = () => [
    { type: LocalizationService }
];

/**
 * Custom component messages override default component messages
 * ([see example]({% slug globalization_editor %}#toc-localization)).
 */
class CustomMessagesComponent extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
}
CustomMessagesComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    {
                        provide: Messages,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => CustomMessagesComponent)
                    }
                ],
                selector: 'kendo-editor-messages',
                template: ``
            },] },
];
/** @nocollapse */
CustomMessagesComponent.ctorParameters = () => [
    { type: LocalizationService }
];

/**
 * @hidden
 */
class FontFamilyDropDownListComponent {
    constructor() {
        this.valueChange = new EventEmitter();
    }
    onValueChange(tag) {
        this.valueChange.emit(tag);
    }
}
FontFamilyDropDownListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                selector: 'kendo-editor-fontfamily-dropdownlist',
                template: `
        <kendo-dropdownlist
            #element
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'fontName'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            (valueChange)="onValueChange($event)"
        >
            <ng-template kendoDropDownListItemTemplate let-dataItem>
                <span [ngStyle]="{ 'font-family': dataItem.fontName }">
                    {{ dataItem.text }}
                </span>
            </ng-template>
        </kendo-dropdownlist>
    `
            },] },
];
FontFamilyDropDownListComponent.propDecorators = {
    data: [{ type: Input }],
    value: [{ type: Input }],
    defaultItem: [{ type: Input }],
    itemDisabled: [{ type: Input }],
    title: [{ type: Input }],
    valueChange: [{ type: Output }],
    element: [{ type: ViewChild, args: ['element',] }]
};

/**
 * @hidden
 */
class FontSizeDropDownListComponent {
    constructor() {
        this.valueChange = new EventEmitter();
    }
    onValueChange(size) {
        this.valueChange.emit(size);
    }
}
FontSizeDropDownListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:no-forward-ref
                selector: 'kendo-editor-fontsize-dropdownlist',
                template: `
        <kendo-dropdownlist
            #element
            [defaultItem]="defaultItem"
            [textField]="'text'"
            [valueField]="'size'"
            [data]="data"
            [(value)]="value"
            [valuePrimitive]="true"
            [itemDisabled]="itemDisabled"
            [attr.title]="title"
            (valueChange)="onValueChange($event)"
        >
        </kendo-dropdownlist>
    `
            },] },
];
FontSizeDropDownListComponent.propDecorators = {
    data: [{ type: Input }],
    value: [{ type: Input }],
    defaultItem: [{ type: Input }],
    itemDisabled: [{ type: Input }],
    title: [{ type: Input }],
    valueChange: [{ type: Output }],
    element: [{ type: ViewChild, args: ['element',] }]
};

const COMPONENT_DIRECTIVES = [
    //alignment
    EditorAlignLeftButtonDirective,
    EditorAlignCenterButtonDirective,
    EditorAlignRightButtonDirective,
    EditorAlignJustifyButtonDirective,
    //file
    EditorInsertFileButtonDirective,
    //history
    EditorRedoButtonDirective,
    EditorUndoButtonDirective,
    //image
    EditorInsertImageButtonDirective,
    //indent
    EditorIndentButtonDirective,
    EditorOutdentButtonDirective,
    //link
    EditorCreateLinkButtonDirective,
    EditorUnlinkButtonDirective,
    //list
    EditorInsertOrderedListButtonDirective,
    EditorInsertUnorderedListButtonDirective,
    //source
    EditorViewSourceButtonDirective,
    //typographical emphasis
    EditorBoldButtonDirective,
    EditorItalicButtonDirective,
    EditorUnderlineButtonDirective,
    EditorStrikethroughButtonDirective,
    EditorSubscriptButtonDirective,
    EditorSuperscriptButtonDirective,
    //color
    EditorForeColorDirective,
    EditorBackColorDirective,
    //clear format
    EditorCleanFormattingButtonDirective,
    //table
    EditorAddColumnBeforeButtonDirective,
    EditorAddColumnAfterButtonDirective,
    EditorAddRowBeforeButtonDirective,
    EditorAddRowAfterButtonDirective,
    EditorDeleteColumnButtonDirective,
    EditorDeleteRowButtonDirective,
    EditorDeleteTableButtonDirective,
    EditorMergeCellsButtonDirective,
    EditorSplitCellButtonDirective,
    // EditorTableWizardButtonDirective,
    //localization
    CustomMessagesComponent,
    LocalizedMessagesDirective
];
const TOOLBAR_TOOLS = [
    EditorFontSizeComponent,
    EditorFontFamilyComponent,
    EditorFormatComponent,
    EditorColorPickerComponent,
    EditorInsertTableButtonComponent
];
const TOOLBAR_DIALOGS = [
    FileLinkDialogComponent,
    ImageDialogComponent,
    SourceDialogComponent,
    FormatDialogComponent,
    ColorPickerDialogComponent,
    FontFamilyDialogComponent,
    FontSizeDialogComponent,
    InsertTableDialogComponent
    // TableWizardDialogComponent
    // Table Wizard Building Blocks
    // TableSettingsComponent,
    // CellSettingsComponent,
    // AccessibilitySettingsComponent
];
const INTERNAL_COMPONENTS = [
    PopupTableGridComponent,
    FormatDropDownListComponent,
    FontFamilyDropDownListComponent,
    FontSizeDropDownListComponent
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the Editor component.
 *
 * The package exports:
 * - `EditorComponent`&mdash;The `EditorComponent` class.
 * - `EditorButtonDirective`&mdash;The `EditorButton` directive class.
 * - `EditorDropDownDirective`&mdash;The `EditorDropDown` directive class.
 * - `EditorDialogDirective`&mdash;The `EditorDialog` directive class.
 * - `ToolBarDropDownListComponent`&mdash;The `ToolBarDropDownListComponent` directive class.
 * - `ButtonModule`&mdash;The `KendoButton` module.
 * - `ToolBarModule`&mdash;The `KendoToolBar` module.
 *
 *  * @example
 *
 * ```ts-no-run
 * // Import the Editor module
 * import { EditorModule } from '@progress/kendo-angular-editor';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare the app component
 *     imports:      [BrowserModule, EditorModule], // import the Editor module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
class EditorModule {
}
EditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    EditorComponent,
                    COMPONENT_DIRECTIVES,
                    TOOLBAR_TOOLS,
                    TOOLBAR_DIALOGS,
                    INTERNAL_COMPONENTS
                ],
                entryComponents: [
                    TOOLBAR_DIALOGS
                ],
                exports: [
                    EditorComponent,
                    COMPONENT_DIRECTIVES,
                    TOOLBAR_TOOLS,
                    ToolBarModule,
                    ButtonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    //needed for unit tests
                    INTERNAL_COMPONENTS
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    //Kendo UI Angular Modules
                    ButtonModule,
                    ColorPickerModule,
                    DialogModule,
                    DropDownsModule,
                    NumericTextBoxModule,
                    ToolBarModule,
                    TextBoxModule
                ]
            },] },
];

/**
 * Generated bundle index. Do not edit.
 */

export { ColorPickerDialogComponent, FileLinkDialogComponent, FontFamilyDialogComponent, FontSizeDialogComponent, FormatDialogComponent, ImageDialogComponent, InsertTableDialogComponent, SourceDialogComponent, CustomMessagesComponent, EditorLocalizationService, LocalizedMessagesDirective, Messages, EditorAlignCenterButtonDirective, EditorAlignJustifyButtonDirective, EditorAlignLeftButtonDirective, EditorAlignRightButtonDirective, EditorBackColorDirective, EditorColorPickerComponent, EditorForeColorDirective, EditorCleanFormattingButtonDirective, FontFamilyDropDownListComponent, EditorFontFamilyComponent, FontSizeDropDownListComponent, EditorFontSizeComponent, FormatDropDownListComponent, EditorFormatComponent, EditorRedoButtonDirective, EditorUndoButtonDirective, EditorInsertImageButtonDirective, EditorIndentButtonDirective, EditorOutdentButtonDirective, EditorCreateLinkButtonDirective, EditorInsertFileButtonDirective, EditorUnlinkButtonDirective, EditorInsertOrderedListButtonDirective, EditorInsertUnorderedListButtonDirective, EditorCommandBase, EditorCommandButton, EditorCommandDialog, EditorViewSourceButtonDirective, EditorAddColumnAfterButtonDirective, EditorAddColumnBeforeButtonDirective, EditorAddRowAfterButtonDirective, EditorAddRowBeforeButtonDirective, EditorDeleteColumnButtonDirective, EditorDeleteRowButtonDirective, EditorDeleteTableButtonDirective, EditorInsertTableButtonComponent, EditorMergeCellsButtonDirective, EditorSplitCellButtonDirective, PopupTableGridComponent, EditorBoldButtonDirective, EditorItalicButtonDirective, EditorStrikethroughButtonDirective, EditorSubscriptButtonDirective, EditorSuperscriptButtonDirective, EditorUnderlineButtonDirective, EditorComponent, EditorModule };
